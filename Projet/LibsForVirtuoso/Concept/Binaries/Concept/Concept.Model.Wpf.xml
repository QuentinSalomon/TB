<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Concept.Model.Wpf</name>
    </assembly>
    <members>
        <member name="T:Concept.Model.Wpf.ConceptBootstrapper">
            <summary>
            Class ConceptBootstrapper
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptBootstrapper.#ctor(System.Windows.Window)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ConceptBootstrapper"/> class.
            </summary>
            <param name="splashScreen">The splash screen.</param>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptBootstrapper.#ctor(System.String[],System.Windows.Window)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ConceptBootstrapper"/> class.
            </summary>
            <param name="mainArgs">The main args.</param>
            <param name="splashScreen">The splash screen.</param>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptBootstrapper.Run">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptBootstrapper.Load">
            <summary>
            This method will be execute on the startup of the application.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptBootstrapper.Unload">
            <summary>
            This method will be execute on the shutdown of the application.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptBootstrapper.RegisterUserPreferences">
            <summary>
            Registers the user preferences.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptBootstrapper.CreateMainWindow">
            <summary>
            Creates the main window.
            </summary>
            <returns>Window.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptBootstrapper.InitializeMainWindow">
            <summary>
            Initializes the main window.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptBootstrapper.RegisterAsyncOperation">
            <summary>
            Registers the async operation.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptBootstrapper.AsyncOperation">
            <summary>
            This method will be execute on the startup of the application as async code.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptBootstrapper.OnAsyncOperationCompleted(System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptBootstrapper.RegisterExceptionHandler">
            <summary>
            Registers the exception handler.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptBootstrapper.ShowExceptionDisplayer(System.Exception)">
            <summary>
            Shows the exception displayer.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptBootstrapper.LoadCustomSkins">
            <summary>
            Loads the custom skins.
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptBootstrapper.Args">
            <summary>
            Gets the main application calling args.
            </summary>
            <value>The args.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptBootstrapper.Company">
            <summary>
            Gets the company.
            </summary>
            <value>The company.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptBootstrapper.ProductName">
            <summary>
            Gets the name of the product.
            </summary>
            <value>The name of the product.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptBootstrapper.UserPreferencesPath">
            <summary>
            Gets the user preferences path.
            </summary>
            <value>The user preferences path.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptBootstrapper.MainWindow">
            <summary>
            Gets the main window.
            </summary>
            <value>The main window.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptBootstrapper.SplashScreen">
            <summary>
            Gets the splash screen.
            </summary>
            <value>The splash screen.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptBootstrapper.SplashScreenMinDisplayTime">
            <summary>
            Gets the splash screen min display time.
            </summary>
            <value>The splash screen min display time.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptBootstrapper.SplashScreenImageUri">
            <summary>
            Gets the splash screen image URI.
            </summary>
            <value>The splash screen image URI.</value>
        </member>
        <member name="E:Concept.Model.Wpf.ConceptBootstrapper.AsyncOperationCompleted">
            <summary>
            Occurs when [async operation completed].
            </summary>
        </member>
        <member name="T:Concept.Model.Wpf.SplashScreen">
            <summary>
            Interaction logic for AboutWindow.xaml
            </summary>
            <summary>
            SplashScreen
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.SplashScreen.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.SplashScreen"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.SplashScreen.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.SplashScreen"/> class.
            </summary>
            <param name="imageUri">The image URI.</param>
        </member>
        <member name="M:Concept.Model.Wpf.SplashScreen.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptListDisplayer">
            <summary>
            Class ConceptListDisplayer
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListDisplayer.CurrentListItemTemplatePropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.ConceptListDisplayer.CurrentListItemTemplate"/> property changed.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListDisplayer.CurrentListItemsPanelTemplatePropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.ConceptListDisplayer.CurrentListItemsPanelTemplate"/> property changed.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListDisplayer.IsCategorizablePropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.ConceptListDisplayer.IsCategorizable"/> property changed.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListDisplayer.IsCategorizedPropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.ConceptListDisplayer.IsCategorized"/> property changed.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListDisplayer.DisplayedCategoryNamePropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.ConceptListDisplayer.DisplayedCategoryName"/> property changed.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListDisplayer.DisplayedCategoryPropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.ConceptListDisplayer.DisplayedCategory"/> property changed.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListDisplayer.CategoriesDisplayersPropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.ConceptListDisplayer.CategoriesDisplayers"/> property changed.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptListDisplayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ConceptListDisplayer"/> class.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListDisplayer.UserPreferenceNameProperty">
            <summary>
            The user preference name property
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptListDisplayer.DoPropertyChanged(System.String)">
            <summary>
            Does the property changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListDisplayer.UserPreferenceName">
            <summary>
            Gets or sets the name of the user preference.
            </summary>
            <value>The name of the user preference.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListDisplayer.ConceptListTemplates">
            <summary>
            Gets the concept list templates.
            </summary>
            <value>The concept list templates.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListDisplayer.CurrentConceptListTemplate">
            <summary>
            Gets or sets the current concept list template.
            </summary>
            <value>The current concept list template.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListDisplayer.CurrentListItemTemplate">
            <summary>
            Gets the current list item template.
            </summary>
            <value>The current list item template.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListDisplayer.CurrentListItemsPanelTemplate">
            <summary>
            Gets the current list items panel template.
            </summary>
            <value>The current list items panel template.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListDisplayer.CommandSetCurrentConceptListTemplate">
            <summary>
            Gets the command set current concept list template.
            </summary>
            <value>The command set current concept list template.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListDisplayer.CanChangeListTemplate">
            <summary>
            Gets or sets a value indicating whether this instance can change list template.
            </summary>
            <value><c>true</c> if this instance can change list template; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListDisplayer.IsCategorizable">
            <summary>
            Gets or sets a value indicating whether this instance is categorizable.
            </summary>
            <value><c>true</c> if this instance is categorizable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListDisplayer.IsCategorized">
            <summary>
            Gets or sets a value indicating whether this instance is categorized.
            </summary>
            <value><c>true</c> if this instance is categorized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListDisplayer.DisplayedCategoryName">
            <summary>
            Gets the name of the displayed category.
            </summary>
            <value>The name of the displayed category.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListDisplayer.DisplayedCategory">
            <summary>
            Gets or sets the displayed category.
            </summary>
            <value>The displayed category.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListDisplayer.CategoriesDisplayers">
            <summary>
            Gets the categories displayers.
            </summary>
            <value>The categories displayers.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListDisplayer.CommandSort">
            <summary>
            Gets the command sort.
            </summary>
            <value>The command sort.</value>
        </member>
        <member name="E:Concept.Model.Wpf.ConceptListDisplayer.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptListDragDropMode">
            <summary>
            Enum ConceptListDragDropMode
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListDragDropMode.None">
            <summary>
            No drag and drop
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListDragDropMode.Inside">
            <summary>
            Drag and drop inside
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListDragDropMode.Outside">
            <summary>
            Drag and drop outside
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListDragDropMode.Both">
            <summary>
            Full drag and drop
            </summary>
        </member>
        <member name="T:Concept.Model.Wpf.DisplayedCategoryToVisibilityConverter">
            <summary>
            Class DisplayedCategoryToVisibilityConverter
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.DisplayedCategoryToVisibilityConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified values.
            </summary>
            <param name="values">The values.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.NotSupportedException">The multivalue converter DisplayedCategoryToVisibilityMultiConverter needs a first value + 
                             of type object and a second value of type string.</exception>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptModelWpfUtils">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptModelWpfUtils.SubjectOverview">
            <summary>
            The subject overview
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptModelWpfUtils.SubjectPreview">
            <summary>
            The subject preview
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptModelWpfUtils.SubjectManager">
            <summary>
            The subject manager
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptModelWpfUtils.DetailsPropertyName">
            <summary>
            Constant string to manage Details property changed.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptModelWpfUtils.SmallImagePropertyName">
            <summary>
            Constant string to manage SmallImage property changed.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptModelWpfUtils.LargeImagePropertyName">
            <summary>
            Constant string to manage LargeImage property changed.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.EditProperties(Concept.Model.ConceptElement,System.Boolean)">
            <summary>
            Edits the properties.
            </summary>
            <param name="element">The element.</param>
            <param name="creating">if set to <c>true</c> [creating].</param>
            <returns></returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.GetView(Concept.Model.ConceptElement,System.String)">
            <summary>
            GetView of the control.
            </summary>
            <param name="element">The element.</param>
            <param name="subject">Display properties of selected subject. </param>
            <returns></returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.GetDefaultView(Concept.Model.ConceptElement,System.String)">
            <summary>
            Gets the default view.
            </summary>
            <param name="element">The element.</param>
            <param name="subject">The subject.</param>
            <returns>FrameworkElement.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.SmallImage(Concept.Model.ConceptElement)">
            <summary>
            Smalls the image.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.LargeImage(Concept.Model.ConceptElement)">
            <summary>
            Larges the image.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.SmallImage(Concept.Model.ConceptFactory)">
            <summary>
            Smalls the image.
            </summary>
            <param name="factory">The factory.</param>
            <returns>ImageSource.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.LargeImage(Concept.Model.ConceptFactory)">
            <summary>
            Larges the image.
            </summary>
            <param name="factory">The factory.</param>
            <returns>ImageSource.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.Details(Concept.Model.ConceptFactory)">
            <summary>
            Details of the element
            </summary>
            <param name="factory">The factory.</param>
            <returns>IntlText.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.Details(Concept.Model.ConceptElement)">
            <summary>
            Details of the element
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.EditControl(Concept.Model.ConceptElement)">
            <summary>
            Edits the control.
            </summary>
            <remarks>Kept for Concept.Hmi 2012 Compatibility</remarks>
            <param name="element">The element.</param>
            <returns>FrameworkElement.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.GetAttributeImage(System.Type,System.Boolean)">
            <summary>
            Gets the attribute image.
            </summary>
            <param name="type">The type.</param>
            <param name="large">if set to <c>true</c> [large].</param>
            <returns></returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.GetImage(System.String)">
            <summary>
            Gets the image.
            </summary>
            <param name="path">The path.</param>
            <returns>ImageSource.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.AddConceptDataTemplates(Concept.Model.Wpf.ConceptListTemplate)">
            <summary>
            Adds the concept data templates.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.AddInConceptDynamicList(Concept.Model.ConceptDynamicList,Concept.Model.ConceptFactories,System.Boolean,System.Int32)">
            <summary>
            Adds the in concept dynamic list.
            </summary>
            <param name="list">The list.</param>
            <param name="factories">The factories.</param>
            <param name="canEdit">if set to <c>true</c> [can edit].</param>
            <param name="index">The index.</param>
            <returns>ConceptElement.</returns>
            <exception cref="T:System.NotSupportedException">Index out of bound</exception>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.AddInConceptStaticList(Concept.Model.ConceptStaticList,System.Boolean,System.Int32)">
            <summary>
            Adds the in concept static list.
            </summary>
            <param name="list">The list.</param>
            <param name="canEdit">if set to <c>true</c> [can edit].</param>
            <param name="index">The index.</param>
            <returns>ConceptElement.</returns>
            <exception cref="T:System.NotSupportedException">Index out of bound</exception>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.ShowFactorySelectionView(Concept.Model.ConceptFactories,System.Boolean,System.String)">
            <summary>
            Shows the factory selection view.
            </summary>
            <param name="factories">The factories.</param>
            <param name="isCategorized">if set to <c>true</c> [is categorized].</param>
            <param name="userPreferenceName">Name of the user preference.</param>
            <returns>ConceptFactory.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.ShowFactorySelectionView(Concept.Utils.IntlText,Concept.Model.ConceptFactories,System.Boolean,System.String)">
            <summary>
            Shows the factory selection view.
            </summary>
            <param name="title">The title.</param>
            <param name="factories">The factories.</param>
            <param name="isCategorized">if set to <c>true</c> [is categorized].</param>
            <param name="userPreferenceName">Name of the user preference.</param>
            <returns>ConceptFactory.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.RetrievePropertyEditor(System.Object,System.Reflection.PropertyInfo,Concept.Utils.IntlText,System.Windows.Data.Binding,System.String)">
            <summary>
            Retrieves the property editor.
            </summary>
            <param name="modelObject">The model object.</param>
            <param name="propertyInfo">The property info.</param>
            <param name="name">The name.</param>
            <param name="valueBinding">The value binding.</param>
            <param name="subject">The subject.</param>
            <returns>FrameworkElement.</returns>
            <exception cref="T:System.NotSupportedException">The editor must be a control</exception>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.RetrieveTypeEditor(System.Type,Concept.Utils.IntlText,System.Windows.Data.Binding,System.String,System.Boolean)">
            <summary>
            Retrieves the type editor.
            </summary>
            <param name="propertyType">Type of the property.</param>
            <param name="name">The name.</param>
            <param name="valueBinding">The value binding.</param>
            <param name="subject">The subject.</param>
            <returns>FrameworkElement.</returns>
            <exception cref="T:System.NotSupportedException">The editor must be a control</exception>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.RetrieveDefaultPropertyEditor(System.Type,Concept.Utils.IntlText,System.Windows.Data.Binding,System.String)">
            <summary>
            Retrieves the default property editor.
            </summary>
            <param name="propertyType">Type of the property.</param>
            <param name="pseudoName">Name of the pseudo.</param>
            <param name="binding">The binding.</param>
            <param name="subject">The subject.</param>
            <returns>FrameworkElement.</returns>
            <exception cref="T:System.Exception">Error loading properties - Type unknown :  + propertyType</exception>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.DefaultApplicationFunctionsForComponent(Concept.Model.ConceptComponent)">
            <summary>
            Defaults the application functions for component.
            </summary>
            <param name="component">The component.</param>
            <returns>IEnumerable{ApplicationFunctionItem}.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.DefaultApplicationFunctionsForList(Concept.Model.ConceptList)">
            <summary>
            Defaults the application functions for list.
            </summary>
            <param name="list">The list.</param>
            <returns>IEnumerable{ApplicationFunctionItem}.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.CommandClone(Concept.Model.ConceptComponent)">
            <summary>
            Commands the clone.
            </summary>
            <param name="component">The component.</param>
            <returns>WpfCommand.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.CommandInsertBefore(Concept.Model.ConceptComponent)">
            <summary>
            Commands the insert before.
            </summary>
            <param name="component">The component.</param>
            <returns>WpfCommand.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.CommandInsertAfter(Concept.Model.ConceptComponent)">
            <summary>
            Commands the insert after.
            </summary>
            <param name="component">The component.</param>
            <returns>WpfCommand.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.CommandMoveUp(Concept.Model.ConceptComponent)">
            <summary>
            Commands the move up.
            </summary>
            <param name="component">The component.</param>
            <returns>WpfCommand.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.CommandMoveDown(Concept.Model.ConceptComponent)">
            <summary>
            Commands the move down.
            </summary>
            <param name="component">The component.</param>
            <returns>WpfCommand.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.CommandDelete(Concept.Model.ConceptComponent)">
            <summary>
            Commands the delete.
            </summary>
            <param name="component">The component.</param>
            <returns>WpfCommand.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.CommandAdd(Concept.Model.ConceptList)">
            <summary>
            Commands the add.
            </summary>
            <param name="list">The list.</param>
            <returns>WpfCommand.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.CommandClear(Concept.Model.ConceptList)">
            <summary>
            Commands the clear.
            </summary>
            <param name="list">The list.</param>
            <returns>WpfCommand.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptModelWpfUtils.ContextMenu(Concept.Model.ConceptElement)">
            <summary>
            Contexts the menu.
            </summary>
            <param name="element">The element.</param>
            <returns>IEnumerable{ApplicationFunction}.</returns>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptModelWpfUtils.ConceptObjectListDefaultListTemplates">
            <summary>
            Gets the concept object list default list templates.
            </summary>
            <value>The concept object list default list templates.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptModelWpfUtils.SmallIconDataTemplate">
            <summary>
            Gets the small icon data template.
            </summary>
            <value>The small icon data template.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptModelWpfUtils.LargeIconDataTemplate">
            <summary>
            Gets the large icon data template.
            </summary>
            <value>The large icon data template.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptModelWpfUtils.DefaultApplicationFunctionsForDynamicComponent">
            <summary>
            Gets the default application functions for dynamic component.
            </summary>
            <value>The default application functions for dynamic component.</value>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptListTemplate">
            <summary>
            Class ConceptListTemplate
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListTemplate.DisplayNamePropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.ConceptListTemplate.DisplayName"/> property changed.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListTemplate.IconPropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.ConceptListTemplate.Icon"/> property changed.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListTemplate.ItemsPanelTemplatePropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.ConceptListTemplate.ItemsPanelTemplate"/> property changed.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListTemplate.ItemTemplatePropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.ConceptListTemplate.ItemTemplate"/> property changed.
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListTemplate.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListTemplate.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListTemplate.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListTemplate.ItemsPanelTemplate">
            <summary>
            Gets or sets the items panel template.
            </summary>
            <value>The items panel template.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListTemplate.ItemTemplate">
            <summary>
            Gets or sets the item template.
            </summary>
            <value>The item template.</value>
        </member>
        <member name="E:Concept.Model.Wpf.ConceptListTemplate.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.PluginDataGrid.PluginsDataGrid_OnIsVisibleChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the OnIsVisibleChanged event of the PluginsDataGrid control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Concept.Model.Wpf.AssemblyLoadedToImageConverter">
            <summary>
            Class AssemblyLoadedToImageConverter
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.AssemblyLoadedToImageConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.AssemblyLoadedToImageConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Concept.Model.Wpf.AssemblyLoadedToVersionConverter">
            <summary>
            Class AssemblyLoadedToVersionConverter
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.AssemblyLoadedToVersionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.AssemblyLoadedToVersionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Concept.Model.Wpf.AssemblyLoadedToCompanyConverter">
            <summary>
            Class AssemblyLoadedToCompanyConverter
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.AssemblyLoadedToCompanyConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.AssemblyLoadedToCompanyConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Concept.Model.Wpf.PathToFilenameConverter">
            <summary>
            Class PathToFilenameConverter
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.PathToFilenameConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.PathToFilenameConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Concept.Model.Wpf.GetFullFilenameConverter">
            <summary>
            Class GetFullFilenameConverter
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.GetFullFilenameConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.GetFullFilenameConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Concept.Model.Wpf.DictionaryValueNotNullToVisibilityConverter">
            <summary>
            Class DictionaryValueNotNullToVisibilityConverter
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.DictionaryValueNotNullToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.DictionaryValueNotNullToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Concept.Model.Wpf.DictionaryToAssemblyInfoReaderConverter">
            <summary>
            Class DictionaryToAssemblyInfoReaderConverter
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.DictionaryToAssemblyInfoReaderConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.DictionaryToAssemblyInfoReaderConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Concept.Model.Wpf.AssemblyLoadedToErrorConverter">
            <summary>
            Class AssemblyLoadedToErrorConverter
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.AssemblyLoadedToErrorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.AssemblyLoadedToErrorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptPluginsView.AssembliesPropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.ConceptPluginsView.Assemblies"/> property changed.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptPluginsView.HasFilenameRemovedPropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.ConceptPluginsView.HasFilenameRemoved"/> property changed.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptPluginsView.RefreshDisplay">
            <summary>
            Refreshes the display.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptPluginsView.CanRestoreProperty">
            <summary>
            The can restore property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptPluginsView.CustomNodeProperty">
            <summary>
            The custom node property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptPluginsView.IsStandaloneProperty">
            <summary>
            The is standalone property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptPluginsView.PluginsSourceProperty">
            <summary>
            The plugins source property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptPluginsView.AfterPuoRestorationEvent">
            <summary>
            The after puo restoration event
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptPluginsView.BeforePuoRestorationEvent">
            <summary>
            The before puo restoration event
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptPluginsView.Assemblies">
            <summary>
            Gets the assemblies.
            </summary>
            <value>The assemblies.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptPluginsView.HasFilenameRemoved">
            <summary>
            Gets or sets a value indicating whether this instance has filename removed.
            </summary>
            <value><c>true</c> if this instance has filename removed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptPluginsView.CanRestore">
            <summary>
            Gets or sets a value indicating whether this instance can restore.
            </summary>
            <value><c>true</c> if this instance can restore; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptPluginsView.CustomNode">
            <summary>
            Gets or sets the custom node.
            </summary>
            <value>The custom node.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptPluginsView.IsStandalone">
            <summary>
            Gets or sets a value indicating whether this instance is standalone.
            </summary>
            <value><c>true</c> if this instance is standalone; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptPluginsView.PluginsSource">
            <summary>
            Gets or sets the plugins source.
            </summary>
            <value>The plugins source.</value>
        </member>
        <member name="E:Concept.Model.Wpf.ConceptPluginsView.AfterPuoRestoration">
            <summary>
            Occurs when [after puo restoration].
            </summary>
        </member>
        <member name="E:Concept.Model.Wpf.ConceptPluginsView.BeforePuoRestoration">
            <summary>
            Occurs when [before puo restoration].
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptPluginsView.FunctionRestore">
            <summary>
            Gets the function restore.
            </summary>
            <value>The function restore.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptPluginsView.CommandAdd">
            <summary>
            Gets the command add.
            </summary>
            <value>The command add.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptPluginsView.CommandRemove">
            <summary>
            Gets the command remove.
            </summary>
            <value>The command remove.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptPluginsView.CommandRestore">
            <summary>
            Gets the command restore.
            </summary>
            <value>The command restore.</value>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptElementDefaultEditor">
            <summary>
            Interaction logic for ConceptElementDefaultEditor.xaml
            </summary>
            <summary>
            ConceptElementDefaultEditor
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptElementDefaultEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ConceptElementDefaultEditor"/> class.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptElementDefaultEditor.ElementProperty">
            <summary>
            The element property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptElementDefaultEditor.IsReadOnlyProperty">
            <summary>
            The readonly property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptElementDefaultEditor.SubjectProperty">
            <summary>
            The subject property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptElementDefaultEditor.IsTitleVisibleProperty">
            <summary>
            The is title visible property
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptElementDefaultEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptElementDefaultEditor.Element">
            <summary>
            Gets or sets the element.
            </summary>
            <value>The element.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptElementDefaultEditor.IsTitleVisible">
            <summary>
            Gets or sets a value indicating whether this instance is title visible.
            </summary>
            <value><c>true</c> if this instance is title visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptElementDefaultEditor.IsReadOnly">
            <summary>
            Gets or sets the Concept element default editor and its content to Read Only.
            </summary>
            <value>The readonly.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptElementDefaultEditor.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptElementErrorEditor">
            <summary>
            Interaction logic for ConceptElementErrorEditor.xaml
            </summary>
            <summary>
            ConceptElementErrorEditor
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptElementErrorEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ConceptElementErrorEditor"/> class.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptElementErrorEditor.ExceptionProperty">
            <summary>
            The exception property
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptElementErrorEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptElementErrorEditor.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptElementNameEditor.ManageIsEditable">
            <summary>
            Gets or sets a value indicating whether this instance is name editable.
            </summary>
            <value><c>true</c> if this instance is name editable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptElementNameEditor.LargeImage">
            <summary>
            Gets the large image.
            </summary>
            <value>The large image.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptElementNameEditor.IsReadOnly">
            <summary>
            Gets or sets the Concept element name editor and its content to Read Only.
            </summary>
            <value>The readonly.</value>
        </member>
        <member name="T:Concept.Model.Wpf.FileSystemComponentToIconConverter">
            <summary>
            Class FileSystemComponentToIconConverter
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.FileSystemComponentToIconConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.FileSystemComponentToIconConverter"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.FileSystemComponentToIconConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.FileSystemComponentToIconConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Concept.Model.Wpf.FileSystemComponentList">
            <summary>
            Class FileSystemComponentList
            </summary>
        </member>
        <member name="T:Concept.Model.Wpf.FileSystemComponent">
            <summary>
            Class FileSystemComponent
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.FileSystemComponent.RefreshChildren">
            <summary>
            Refreshes the children.
            </summary>
            <returns><c>true</c></returns>
        </member>
        <member name="M:Concept.Model.Wpf.FileSystemComponentList.RefreshChildren">
            <summary>
            Refreshes the children.
            </summary>
            <returns><c>true</c></returns>
        </member>
        <member name="P:Concept.Model.Wpf.FileSystemComponentList.ChildrenComponents">
            <summary>
            Gets or sets the children components.
            </summary>
            <value>The children components.</value>
        </member>
        <member name="T:Concept.Model.Wpf.DriveItem">
            <summary>
            Class DriveItem
            </summary>
        </member>
        <member name="T:Concept.Model.Wpf.FolderItem">
            <summary>
            Class FolderItem
            </summary>
        </member>
        <member name="T:Concept.Model.Wpf.FolderItemBase">
            <summary>
            Class FolderItemBase
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.FolderItemBase.FileSystemPath">
            <summary>
            Gets or sets the file system path.
            </summary>
            <value>The file system path.</value>
        </member>
        <member name="M:Concept.Model.Wpf.FolderItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.FolderItem"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="fileSystemPath">The file system path.</param>
        </member>
        <member name="M:Concept.Model.Wpf.FolderItem.RefreshChildren">
            <summary>
            Refreshes the children.
            </summary>
            <returns><c>true</c> if success, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.Wpf.DriveItem.#ctor(System.String,System.String,System.IO.DriveType)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.DriveItem"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="fileSystemPath">The file system path.</param>
            <param name="driveType">Type of the drive.</param>
        </member>
        <member name="P:Concept.Model.Wpf.DriveItem.DriveType">
            <summary>
            Gets or sets the type of the drive.
            </summary>
            <value>The type of the drive.</value>
        </member>
        <member name="T:Concept.Model.Wpf.RootItem">
            <summary>
            Class RootItem
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.RootItem.RefreshChildren">
            <summary>
            Refreshes the children.
            </summary>
            <returns><c>true</c> if success, <c>false</c> otherwise</returns>
        </member>
        <member name="T:Concept.Model.Wpf.SharedDriveItem">
            <summary>
            Class SharedDriveItem
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.SharedDriveItem.#ctor(System.String,System.String,Concept.Model.Wpf.ShareType)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.SharedDriveItem"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="fileSystemPath">The file system path.</param>
            <param name="shareType">Type of the share.</param>
        </member>
        <member name="M:Concept.Model.Wpf.SharedDriveItem.RefreshChildren">
            <summary>
            Refreshes the children.
            </summary>
            <returns><c>true</c> if success, <c>false</c> otherwise</returns>
        </member>
        <member name="P:Concept.Model.Wpf.SharedDriveItem.ShareType">
            <summary>
            Gets or sets the type of the share.
            </summary>
            <value>The type of the share.</value>
        </member>
        <member name="T:Concept.Model.Wpf.SharedFolderEdition">
            <summary>
            Interaction logic for SharedFolderEdition.xaml
            </summary>
            <summary>
            SharedFolderEdition
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.SharedFolderEdition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.SharedFolderEdition"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.SharedFolderEdition.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Concept.Model.Wpf.ShareType">
            <summary>
            Enum ShareType
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareType.Disk">
            <summary>
            The disk
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareType.Printer">
            <summary>
            The printer
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareType.Device">
            <summary>
            The device
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareType.IPC">
            <summary>
            The IPC
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareType.Special">
            <summary>
            The special
            </summary>
        </member>
        <member name="T:Concept.Model.Wpf.Share">
            <summary>
            Class Share
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.Share._server">
            <summary>
            The _server
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.Share._netName">
            <summary>
            The _net name
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.Share._path">
            <summary>
            The _path
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.Share._shareType">
            <summary>
            The _share type
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.Share._remark">
            <summary>
            The _remark
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.Share.#ctor(System.String,System.String,System.String,Concept.Model.Wpf.ShareType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.Share"/> class.
            </summary>
            <param name="server">The server.</param>
            <param name="netName">Name of the net.</param>
            <param name="path">The path.</param>
            <param name="shareType">Type of the share.</param>
            <param name="remark">The remark.</param>
        </member>
        <member name="M:Concept.Model.Wpf.Share.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the path to this share
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the path to this share.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.Share.MatchesPath(System.String)">
            <summary>
            Matcheses the path.
            </summary>
            <param name="path">The path.</param>
            <returns><c>true</c> if this share matches the local path, <c>false</c> otherwise</returns>
        </member>
        <member name="P:Concept.Model.Wpf.Share.Server">
            <summary>
            Gets the server.
            </summary>
            <value>The server.</value>
        </member>
        <member name="P:Concept.Model.Wpf.Share.NetName">
            <summary>
            Gets the name of the net.
            </summary>
            <value>The name of the net.</value>
        </member>
        <member name="P:Concept.Model.Wpf.Share.Path">
            <summary>
            Gets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Concept.Model.Wpf.Share.ShareType">
            <summary>
            Gets the type of the share.
            </summary>
            <value>The type of the share.</value>
        </member>
        <member name="P:Concept.Model.Wpf.Share.Remark">
            <summary>
            Gets the remark.
            </summary>
            <value>The remark.</value>
        </member>
        <member name="P:Concept.Model.Wpf.Share.IsFileSystem">
            <summary>
            Gets a value indicating whether this instance is file system.
            </summary>
            <value><c>true</c>if this is a file system share; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.Share.Root">
            <summary>
            Get the root of a disk-based share
            </summary>
            <value>The root.</value>
        </member>
        <member name="T:Concept.Model.Wpf.ShareCollection">
            <summary>
            Class ShareCollection
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.MAX_PATH">
            <summary>
            Maximum path length
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.NO_ERROR">
            <summary>
            No error
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.ERROR_ACCESS_DENIED">
            <summary>
            Access denied
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.ERROR_WRONG_LEVEL">
            <summary>
            Access denied
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.ERROR_MORE_DATA">
            <summary>
            More data available
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.ERROR_NOT_CONNECTED">
            <summary>
            Not connected
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.UNIVERSAL_NAME_INFO_LEVEL">
            <summary>
            Level 1
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.MAX_SI50_ENTRIES">
            <summary>
            Max extries (9x)
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ShareCollection.WNetGetUniversalName(System.String,System.Int32,Concept.Model.Wpf.ShareCollection.UNIVERSAL_NAME_INFO@,System.Int32@)">
            <summary>
            Ws the name of the net get universal.
            </summary>
            <param name="lpLocalPath">The lp local path.</param>
            <param name="dwInfoLevel">The dw info level.</param>
            <param name="lpBuffer">The lp buffer.</param>
            <param name="lpBufferSize">Size of the lp buffer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ShareCollection.WNetGetUniversalName(System.String,System.Int32,System.IntPtr,System.Int32@)">
            <summary>
            Ws the name of the net get universal.
            </summary>
            <param name="lpLocalPath">The lp local path.</param>
            <param name="dwInfoLevel">The dw info level.</param>
            <param name="lpBuffer">The lp buffer.</param>
            <param name="lpBufferSize">Size of the lp buffer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ShareCollection.NetShareEnum(System.String,System.Int32,System.IntPtr@,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Nets the share enum.
            </summary>
            <param name="lpServerName">Name of the lp server.</param>
            <param name="dwLevel">The dw level.</param>
            <param name="lpBuffer">The lp buffer.</param>
            <param name="dwPrefMaxLen">The dw pref max len.</param>
            <param name="entriesRead">The entries read.</param>
            <param name="totalEntries">The total entries.</param>
            <param name="hResume">The h resume.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ShareCollection.NetShareEnum(System.String,System.Int32,System.IntPtr,System.UInt16,System.UInt16@,System.UInt16@)">
            <summary>
            Nets the share enum.
            </summary>
            <param name="lpServerName">Name of the lp server.</param>
            <param name="dwLevel">The dw level.</param>
            <param name="lpBuffer">The lp buffer.</param>
            <param name="cbBuffer">The cb buffer.</param>
            <param name="entriesRead">The entries read.</param>
            <param name="totalEntries">The total entries.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ShareCollection.NetApiBufferFree(System.IntPtr)">
            <summary>
            Nets the API buffer free.
            </summary>
            <param name="lpBuffer">The lp buffer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ShareCollection.EnumerateSharesNT(System.String,Concept.Model.Wpf.ShareCollection)">
            <summary>
            Enumerates the shares NT.
            </summary>
            <param name="server">The server.</param>
            <param name="shares">The shares.</param>
        </member>
        <member name="M:Concept.Model.Wpf.ShareCollection.EnumerateShares9x(System.String,Concept.Model.Wpf.ShareCollection)">
            <summary>
            Enumerates the shares9x.
            </summary>
            <param name="server">The server.</param>
            <param name="shares">The shares.</param>
        </member>
        <member name="M:Concept.Model.Wpf.ShareCollection.EnumerateShares(System.String,Concept.Model.Wpf.ShareCollection)">
            <summary>
            Enumerates the shares.
            </summary>
            <param name="server">The server.</param>
            <param name="shares">The shares.</param>
        </member>
        <member name="M:Concept.Model.Wpf.ShareCollection.IsValidFilePath(System.String)">
            <summary>
            Determines whether [is valid file path] [the specified file name].
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns><c>true</c> if [is valid file path] [the specified file name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ShareCollection.PathToUnc(System.String)">
            <summary>
            Pathes to unc.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ShareCollection.PathToShare(System.String)">
            <summary>
            Pathes to share.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>Share.</returns>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection._local">
            <summary>
            The _local
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ShareCollection.GetShares(System.String)">
            <summary>
            Gets the shares.
            </summary>
            <param name="server">The server.</param>
            <returns>ShareCollection.</returns>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection._server">
            <summary>
            The _server
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ShareCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ShareCollection"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ShareCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ShareCollection"/> class.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="M:Concept.Model.Wpf.ShareCollection.Add(Concept.Model.Wpf.Share)">
            <summary>
            Adds the specified share.
            </summary>
            <param name="share">The share.</param>
        </member>
        <member name="M:Concept.Model.Wpf.ShareCollection.Add(System.String,System.String,Concept.Model.Wpf.ShareType,System.String)">
            <summary>
            Adds the specified net name.
            </summary>
            <param name="netName">Name of the net.</param>
            <param name="path">The path.</param>
            <param name="shareType">Type of the share.</param>
            <param name="remark">The remark.</param>
        </member>
        <member name="M:Concept.Model.Wpf.ShareCollection.CopyTo(Concept.Model.Wpf.Share[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:Concept.Model.Wpf.ShareCollection.IsNT">
            <summary>
            Gets a value indicating whether this instance is NT.
            </summary>
            <value><c>true</c> if this instance is NT; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ShareCollection.IsW2KUp">
            <summary>
            Gets a value indicating whether this instance is w2 K up.
            </summary>
            <value><c>true</c> if this instance is w2 K up; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ShareCollection.LocalShares">
            <summary>
            Gets the local shares.
            </summary>
            <value>The local shares.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ShareCollection.Server">
            <summary>
            Gets the server.
            </summary>
            <value>The server.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ShareCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Concept.Model.Wpf.Share"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>Share.</returns>
        </member>
        <member name="P:Concept.Model.Wpf.ShareCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Concept.Model.Wpf.Share"/> with the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns>Share.</returns>
        </member>
        <member name="T:Concept.Model.Wpf.ShareCollection.UNIVERSAL_NAME_INFO">
            <summary>
            Struct UNIVERSAL_NAME_INFO
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.UNIVERSAL_NAME_INFO.lpUniversalName">
            <summary>
            The lp universal name
            </summary>
        </member>
        <member name="T:Concept.Model.Wpf.ShareCollection.SHARE_INFO_2">
            <summary>
            Struct SHARE_INFO_2
            </summary>
            <remarks>Share information, NT, level 2
            Requires admin rights to work.</remarks>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.SHARE_INFO_2.NetName">
            <summary>
            The net name
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.SHARE_INFO_2.ShareType">
            <summary>
            The share type
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.SHARE_INFO_2.Remark">
            <summary>
            The remark
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.SHARE_INFO_2.Permissions">
            <summary>
            The permissions
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.SHARE_INFO_2.MaxUsers">
            <summary>
            The max users
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.SHARE_INFO_2.CurrentUsers">
            <summary>
            The current users
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.SHARE_INFO_2.Path">
            <summary>
            The path
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.SHARE_INFO_2.Password">
            <summary>
            The password
            </summary>
        </member>
        <member name="T:Concept.Model.Wpf.ShareCollection.SHARE_INFO_1">
            <summary>
            Struct SHARE_INFO_1
            </summary>
            <remarks>Share information, NT, level 1
            Fallback when no admin rights.</remarks>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.SHARE_INFO_1.NetName">
            <summary>
            The net name
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.SHARE_INFO_1.ShareType">
            <summary>
            The share type
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.SHARE_INFO_1.Remark">
            <summary>
            The remark
            </summary>
        </member>
        <member name="T:Concept.Model.Wpf.ShareCollection.SHARE_INFO_50">
            <summary>
            Share information, Win9x
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.SHARE_INFO_50.NetName">
            <summary>
            The net name
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.SHARE_INFO_50.bShareType">
            <summary>
            The b share type
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.SHARE_INFO_50.Flags">
            <summary>
            The flags
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.SHARE_INFO_50.Remark">
            <summary>
            The remark
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.SHARE_INFO_50.Path">
            <summary>
            The path
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.SHARE_INFO_50.PasswordRW">
            <summary>
            The password RW
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.SHARE_INFO_50.PasswordRO">
            <summary>
            The password RO
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ShareCollection.SHARE_INFO_50.ShareType">
            <summary>
            Gets the type of the share.
            </summary>
            <value>The type of the share.</value>
        </member>
        <member name="T:Concept.Model.Wpf.ShareCollection.SHARE_INFO_1_9x">
            <summary>
            Struct SHARE_INFO_1_9x
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.SHARE_INFO_1_9x.NetName">
            <summary>
            The net name
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.SHARE_INFO_1_9x.Padding">
            <summary>
            The padding
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.SHARE_INFO_1_9x.bShareType">
            <summary>
            The b share type
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ShareCollection.SHARE_INFO_1_9x.Remark">
            <summary>
            The remark
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ShareCollection.SHARE_INFO_1_9x.ShareType">
            <summary>
            Gets the type of the share.
            </summary>
            <value>The type of the share.</value>
        </member>
        <member name="T:Concept.Model.Wpf.ObjectTreeExplorerBase">
            <summary>
            Class ObjectTreeExplorerBase
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ObjectTreeExplorerBase.SelectedItemPropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.ObjectTreeExplorerBase.SelectedItem"/> property changed.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ObjectTreeExplorerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ObjectTreeExplorerBase"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ObjectTreeExplorerBase.CanSelectItem(Concept.Model.ConceptElement)">
            <summary>
            Determines whether this instance [can select item] the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if this instance [can select item] the specified item; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ObjectTreeExplorerBase.SelectItem(Concept.Model.ConceptElement)">
            <summary>
            Selects the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Concept.Model.Wpf.ObjectTreeExplorerBase.BrowseUp">
            <summary>
            Browses up.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ObjectTreeExplorerBase.BrowseHome">
            <summary>
            Browses the home.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ObjectTreeExplorerBase.PreviousItems">
            <summary>
            The previous items
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ObjectTreeExplorerBase.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ObjectTreeExplorerBase.CommandSelectItem">
            <summary>
            Gets the command select item.
            </summary>
            <value>The command select item.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ObjectTreeExplorerBase.CommandBrowseBack">
            <summary>
            Gets the command browse back.
            </summary>
            <value>The command browse back.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ObjectTreeExplorerBase.CommandBrowseHome">
            <summary>
            Gets the command browse home.
            </summary>
            <value>The command browse home.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ObjectTreeExplorerBase.CommandBrowseUp">
            <summary>
            Gets the command browse up.
            </summary>
            <value>The command browse up.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ObjectTreeExplorerBase.CanBrowseUp">
            <summary>
            Gets a value indicating whether this instance can browse up.
            </summary>
            <value><c>true</c> if this instance can browse up; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ObjectTreeExplorerBase.CanBrowseHome">
            <summary>
            Gets a value indicating whether this instance can browse home.
            </summary>
            <value><c>true</c> if this instance can browse home; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Concept.Model.Wpf.ObjectTreeExplorerFile">
            <summary>
            Class ObjectTreeExplorerFile
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ObjectTreeExplorerFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ObjectTreeExplorerFile"/> class.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ObjectTreeExplorerFile.SelectedPathProperty">
            <summary>
            The selected path property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ObjectTreeExplorerFile.IsNetworkVisibleProperty">
            <summary>
            The is network visible property
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ObjectTreeExplorerFile.CanSelectItem(Concept.Model.ConceptElement)">
            <summary>
            Determines whether this instance [can select item] the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if this instance [can select item] the specified item; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ObjectTreeExplorerFile.SelectItem(Concept.Model.ConceptElement)">
            <summary>
            Selects the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Concept.Model.Wpf.ObjectTreeExplorerFile.BrowseUp">
            <summary>
            Browses up.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ObjectTreeExplorerFile.BrowseHome">
            <summary>
            Browses the home.
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ObjectTreeExplorerFile.SelectedPath">
            <summary>
            Gets or sets the selected path.
            </summary>
            <value>The selected path.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ObjectTreeExplorerFile.IsNetworkVisible">
            <summary>
            Gets or sets a value indicating whether this instance is network visible.
            </summary>
            <value><c>true</c> if this instance is network visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ObjectTreeExplorerFile.CanBrowseUp">
            <summary>
            Gets a value indicating whether this instance can browse up.
            </summary>
            <value><c>true</c> if this instance can browse up; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ObjectTreeExplorerFile.CanBrowseHome">
            <summary>
            Gets a value indicating whether this instance can browse home.
            </summary>
            <value><c>true</c> if this instance can browse home; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Concept.Model.Wpf.PngImageSelector">
            <summary>
            Interaction logic for PngImageSelector.xaml
            </summary>
            <summary>
            PngImageSelector
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.PngImageSelector.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Concept.Model.Wpf.IAdvanceProvider">
            <summary>
            Interface IAdvanceProvider
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.IAdvanceProvider.AdvancePercent">
            <summary>
            Gets or sets the advance percent.
            </summary>
            <value>The advance percent.</value>
        </member>
        <member name="P:Concept.Model.Wpf.IAdvanceProvider.IsActive">
            <summary>
            Gets or sets a value indicating whether this instance is active.
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptElementToAdvanceConverter">
            <summary>
            Class ConceptElementToAdvanceConverter
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptElementToAdvanceConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.InvalidOperationException">The target must be a ConceptElement !</exception>
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:Concept.Model.Wpf.IContextMenuProvider" -->
        <member name="P:Concept.Model.Wpf.IContextMenuProvider.ContextMenu">
            <summary>
            Gets the context menu.
            </summary>
            <value>The context menu.</value>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptElementToContextMenuConverter">
            <summary>
            Class ConceptElementToContextMenuConverter
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptElementToContextMenuConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.InvalidOperationException">The target must be a ConceptElement !</exception>
        </member>
        <member name="T:Concept.Model.Wpf.IToolbarProvider">
            <summary>
            Interface IToolbarProvider
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.IToolbarProvider.Toolbar">
            <summary>
            Gets the toolbar.
            </summary>
            <value>The toolbar.</value>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptElementToToolBarConverter">
            <summary>
            Class ConceptElementToToolBarConverter
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptElementToToolBarConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.InvalidOperationException">The target must be a ConceptElement !</exception>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptLinkEditor">
            <summary>
            Class ConceptLinkEditor
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptLinkEditor.LinkPropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.ConceptLinkEditor.Link"/> property changed.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptLinkEditor.LinkProperty">
            <summary>
            Gets the <see cref="T:System.Windows.DependencyProperty"/> used as the backing store for the <c>Link</c> property of this <see cref="T:System.Windows.Controls.UserControl"/>.
            You should use the <c>Link</c> property of this <see cref="T:System.Windows.Controls.UserControl"/> instead.
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptLinkEditor.Link">
            <summary>
            Gets or sets the <see cref="T:Concept.Model.ConceptLink"/> to be edited with this <see cref="T:System.Windows.Controls.UserControl"/>.
            This is a <see cref="T:System.Windows.DependencyProperty"/>. The best practice is to bind your model to it.
            </summary>
            <value>The <see cref="T:Concept.Model.ConceptLink"/> to be edited.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptLinkEditor.CommandEdit">
            <summary>
            Gets the command edit.
            </summary>
            <value>The command edit.</value>
        </member>
        <member name="T:Concept.Model.Wpf.DiagnosticToImageConverter">
            <summary>
            Converter that can convert a link diagnostic into an image.
            This is used to show an icon depending on the diagnostic of the link.
            There are four possible diagnostics:
            <list type="number">
            <item><description>Okay.</description></item>
            <item><description>Information.</description></item>
            <item><description>Warning.</description></item>
            <item><description>Error.</description></item>
            </list>
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.DiagnosticToImageConverter.#cctor">
            <summary>
            Initializes the <see cref="T:Concept.Model.Wpf.DiagnosticToImageConverter"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.DiagnosticToImageConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a <see cref="T:Concept.Model.ConceptLinkDiagnostic"/> value to a <see cref="T:System.Windows.Media.ImageSource"/>.
            </summary>
            <param name="value">The diagnostic value produced by the binding source. It must be a <see cref="T:Concept.Model.ConceptLinkDiagnostic"/>.</param>
            <param name="targetType">The type of the binding target property. It must be an <see cref="T:System.Windows.Media.ImageSource"/>.</param>
            <param name="parameter">Not used</param>
            <param name="culture">Not used</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the one of the parameter is not of the good type.</exception>
            <returns>
            A converted <see cref="T:System.Windows.Media.ImageSource"/> value. The method never returns null.
            </returns>
        </member>
        <member name="M:Concept.Model.Wpf.DiagnosticToImageConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts back a <see cref="T:System.Windows.Media.ImageSource"/> value to a <see cref="T:Concept.Model.ConceptLinkDiagnostic"/>.
            </summary>
            <param name="value">The diagnostic value produced by the binding source. It must be a <see cref="T:System.Windows.Media.ImageSource"/>.</param>
            <param name="targetType">The type of the binding target property. It must be an <see cref="T:Concept.Model.ConceptLinkDiagnostic"/>.</param>
            <param name="parameter">Not used</param>
            <param name="culture">Not used</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the one of the parameter is not of the good type.</exception>
            <returns>
            A converted back <see cref="T:Concept.Model.ConceptLinkDiagnostic"/> value. The method never returns null.
            </returns>
        </member>
        <member name="M:Concept.Model.Wpf.DiagnosticToImageConverter.IconOf(Concept.Model.ConceptLinkDiagnostic)">
            <summary>
            Find the <see cref="T:System.Windows.Media.ImageSource"/> corresponding to the <see cref="T:Concept.Model.ConceptLinkDiagnostic"/>.
            </summary>
            <param name="diagnostic">The <see cref="T:Concept.Model.ConceptLinkDiagnostic"/> for which the <see cref="T:System.Windows.Media.ImageSource"/> will be found.</param>
            <returns>
            The <see cref="T:System.Windows.Media.ImageSource"/> corresponding to the <see cref="T:Concept.Model.ConceptLinkDiagnostic"/>. The method never returns null.
            </returns>
        </member>
        <member name="M:Concept.Model.Wpf.DiagnosticToImageConverter.DiagnosticOf(System.Windows.Media.ImageSource)">
            <summary>
            Find the <see cref="T:Concept.Model.ConceptLinkDiagnostic"/> corresponding to the <see cref="T:System.Windows.Media.ImageSource"/>.
            </summary>
            <param name="image">The <see cref="T:System.Windows.Media.ImageSource"/> for which the <see cref="T:Concept.Model.ConceptLinkDiagnostic"/> will be found.</param>
            <returns>
            The <see cref="T:Concept.Model.ConceptLinkDiagnostic"/> corresponding to the <see cref="T:System.Windows.Media.ImageSource"/>. The method never returns null.
            </returns>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptMultipleLinkEditor">
            <summary>
            <see cref="T:System.Windows.Window"/> used to edit a <see cref="T:Concept.Model.ConceptMultipleLink"/>.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptMultipleLinkEditor.CreateExecute(Concept.Model.ConceptMultipleLink)">
            <summary>
            Creates a new <see cref="T:Concept.Model.Wpf.ConceptMultipleLinkEditor"/>, link the <see cref="T:Concept.Model.ConceptMultipleLink"/> parameter to it, 
            and show the <see cref="T:Concept.Model.Wpf.ConceptMultipleLinkEditor"/> to the user.
            </summary>
            <param name="link">The <see cref="T:Concept.Model.ConceptMultipleLink"/> to link to the new <see cref="T:Concept.Model.Wpf.ConceptMultipleLinkEditor"/>.</param>
            <returns>
            <value><c>true</c> if the <see cref="T:Concept.Model.ConceptMultipleLink"/> has been modified by the user; otherwise, <c>false</c>.</value>
            </returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptMultipleLinkEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ConceptMultipleLinkEditor"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptMultipleLinkEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptSingleLinkEditor">
            <summary>
            <see cref="T:System.Windows.Window"/> used to edit a <see cref="T:Concept.Model.ConceptSingleLink"/>.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptSingleLinkEditor.CreateExecute(Concept.Model.ConceptSingleLink)">
            <summary>
            Creates a new <see cref="T:Concept.Model.Wpf.ConceptSingleLinkEditor"/>, link the <see cref="T:Concept.Model.ConceptSingleLink"/>
            parameter to it, and show the <see cref="T:Concept.Model.Wpf.ConceptSingleLinkEditor"/> to the user.
            </summary>
            <param name="link">The <see cref="T:Concept.Model.ConceptSingleLink"/> to link to the new <see cref="T:Concept.Model.Wpf.ConceptSingleLinkEditor"/>.</param>
            <returns>
            <value><c>true</c> if the <see cref="T:Concept.Model.ConceptSingleLink"/> has been modified by the user; otherwise, <c>false</c>.</value>
            </returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptSingleLinkEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ConceptSingleLinkEditor"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptSingleLinkEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptSingleLinkEditor.SelectionNone">
            <summary>
            Gets the <see cref="T:Concept.Model.ConceptComponent"/> allowing to deselect, for exemple to set link to empty.
            </summary>
            <value>The selected <see cref="T:Concept.Model.ConceptComponent"/> as if none were selected.</value>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptLinkableToLinkableAndNoneConverter">
            <summary>
            Class ConceptLinkableToLinkableAndNoneConverter
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptLinkableToLinkableAndNoneConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptLinksDisplayer">
            <summary>
            <see cref="T:System.Windows.Controls.UserControl"/> used to edit a <see cref="T:Concept.Model.ConceptLink"/>.
            </summary>
            <summary>
            ConceptLinksDisplayer
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptLinksDisplayer.GetAncestorByType(System.Windows.DependencyObject,System.Type)">
            <summary>
            Gets the ancestor of the <see cref="T:System.Windows.DependencyObject"/> parameter by the <see cref="T:System.Type"/> parameter.
            </summary>
            <param name="element">The <see cref="T:System.Windows.DependencyObject"/> on which to find the ancestor.</param>
            <param name="type">The <see cref="T:System.Type"/> of the ancestor to find.</param>
            <returns>
            There is three possible returns :
            <list type="number">
            <item><description><c>Null</c>, if the <see cref="T:System.Windows.DependencyObject"/> parameter is <c>Null</c>.</description></item>
            <item><description>The <see cref="T:System.Windows.DependencyObject"/> parameter, if it is of the same <see cref="T:System.Type"/> as the <see cref="T:System.Type"/> parameter.</description></item>
            <item><description>The first ancester of the <see cref="T:System.Windows.DependencyObject"/> parameter with the same <see cref="T:System.Type"/> as the <see cref="T:System.Type"/> parameter.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptLinksDisplayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ConceptLinksDisplayer"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptLinksDisplayer.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptLinksDisplayer.Links">
            <summary>
            Gets or sets the <see cref="T:Concept.Model.ConceptLink"/> to be edited with this <see cref="T:System.Windows.Controls.UserControl"/>.
            This is a <see cref="T:System.Windows.DependencyProperty"/>. The best practice is to bind your model to it.
            </summary>
            <value>The <see cref="T:Concept.Model.ConceptLink"/> to be edited.</value>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptLinksEditorModelView">
            <summary>
            
            </summary>
        </member>
        <member name="T:Concept.Model.Wpf.ObjectSelector">
            <summary>
            Interaction logic for ObjectSelector.xaml
            </summary>
            <summary>
            ObjectSelector
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ObjectSelector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ObjectSelector"/> class.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ObjectSelector.AvailableItemsProperty">
            <summary>
            The available items property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ObjectSelector.SelectedItemsProperty">
            <summary>
            The selected items property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ObjectSelector.SelectedAvailableItemProperty">
            <summary>
            The selected available item property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ObjectSelector.SelectedSelectedItemProperty">
            <summary>
            The selected selected item property
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ObjectSelector.Add">
            <summary>
            Adds this instance.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ObjectSelector.Remove">
            <summary>
            Removes this instance.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ObjectSelector.AddAll">
            <summary>
            Adds all.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ObjectSelector.RemoveAll">
            <summary>
            Removes all.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ObjectSelector.First">
            <summary>
            Firsts this instance.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ObjectSelector.Up">
            <summary>
            Ups this instance.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ObjectSelector.Down">
            <summary>
            Downs this instance.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ObjectSelector.Last">
            <summary>
            Lasts this instance.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ObjectSelector.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ObjectSelector.AvailableItems">
            <summary>
            Gets or sets the available items.
            </summary>
            <value>The available items.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ObjectSelector.SelectedItems">
            <summary>
            Gets or sets the selected items.
            </summary>
            <value>The selected items.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ObjectSelector.SelectedAvailableItem">
            <summary>
            Gets or sets the selected available item.
            </summary>
            <value>The selected available item.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ObjectSelector.SelectedSelectedItem">
            <summary>
            Gets or sets the selected selected item.
            </summary>
            <value>The selected selected item.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ObjectSelector.CommandAdd">
            <summary>
            Gets the command add.
            </summary>
            <value>The command add.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ObjectSelector.CommandAddAll">
            <summary>
            Gets the command add all.
            </summary>
            <value>The command add all.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ObjectSelector.CommandRemove">
            <summary>
            Gets the command remove.
            </summary>
            <value>The command remove.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ObjectSelector.CommandRemoveAll">
            <summary>
            Gets the command remove all.
            </summary>
            <value>The command remove all.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ObjectSelector.CommandUp">
            <summary>
            Gets the command up.
            </summary>
            <value>The command up.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ObjectSelector.CommandDown">
            <summary>
            Gets the command down.
            </summary>
            <value>The command down.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ObjectSelector.CommandFirst">
            <summary>
            Gets the command first.
            </summary>
            <value>The command first.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ObjectSelector.CommandLast">
            <summary>
            Gets the command last.
            </summary>
            <value>The command last.</value>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptDynamicComponentEditor">
            <summary>
            Class ConceptDynamicComponentEditor
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptDynamicComponentEditor.ComponentPropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.ConceptDynamicComponentEditor.Component"/> property changed.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptDynamicComponentEditor.ComponentProperty">
            <summary>
            The component property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptDynamicComponentEditor.FactoriesProperty">
            <summary>
            The factories property
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptDynamicComponentEditor.Component">
            <summary>
            Gets or sets the component.
            </summary>
            <value>The component.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptDynamicComponentEditor.Factories">
            <summary>
            Gets or sets the <see cref="T:Concept.Model.ConceptFactories"/>the collection of factories of the
            classes which can be added to the dynamic list.
            </summary>
            <value>The <see cref="T:Concept.Model.ConceptFactories"/>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptDynamicComponentEditor.CanEdit">
            <summary>
            Gets or sets a value indicating whether this instance can edit.
            </summary>
            <value><c>true</c> if this instance can edit; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptDynamicComponentEditor.CommandDefine">
            <summary>
            Gets the command define.
            </summary>
            <value>The command define.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptDynamicComponentEditor.CommandEdit">
            <summary>
            Gets the command edit.
            </summary>
            <value>The command edit.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptDynamicComponentEditor.CommandClear">
            <summary>
            Gets the command clear.
            </summary>
            <value>The command clear.</value>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptDynamicListEditor">
            <summary>
            Class ConceptDynamicListEditor
            </summary>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptListEditor">
            <summary>
            <see cref="T:System.Windows.Controls.UserControl"/> used to edit a <see cref="P:Concept.Model.Wpf.ConceptListEditor.ConceptList"/>.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListEditor.ConceptListPropertyName">
            <summary>
            The concept list property name
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptListEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ConceptListEditor"/> class.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListEditor.ConceptListProperty">
            <summary>
            The concept list property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListEditor.SelectedItemProperty">
            <summary>
            The selected item property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListEditor.SelectedIndexProperty">
            <summary>
            The selected index property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListEditor.CanAddProperty">
            <summary>
            The can add property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListEditor.CanRemoveProperty">
            <summary>
            The can remove property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListEditor.CanCloneProperty">
            <summary>
            The can clone property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListEditor.CanEditProperty">
            <summary>
            The can edit property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptListEditor.CanMoveProperty">
            <summary>
            The can move property
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptListEditor.Add">
            <summary>
            Adds this instance.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptListEditor.SelectItem(Concept.Model.ConceptElement)">
            <summary>
            Selects the item.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptListEditor.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListEditor.ConceptList">
            <summary>
            Gets or sets the concept list.
            </summary>
            <value>The concept list.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListEditor.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListEditor.SelectedIndex">
            <summary>
            Gets or sets the index of the selected.
            </summary>
            <value>The index of the selected.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListEditor.CanAdd">
            <summary>
            Gets or sets a value indicating whether this instance can add.
            </summary>
            <value><c>true</c> if this instance can add; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListEditor.CanRemove">
            <summary>
            Gets or sets a value indicating whether this instance can remove.
            </summary>
            <value><c>true</c> if this instance can remove; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListEditor.CanClone">
            <summary>
            Gets or sets a value indicating whether this instance can clone.
            </summary>
            <value><c>true</c> if this instance can clone; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListEditor.CanEdit">
            <summary>
            Gets or sets a value indicating whether this instance can edit.
            </summary>
            <value><c>true</c> if this instance can edit; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListEditor.CanMove">
            <summary>
            Gets or sets a value indicating whether this instance can move.
            </summary>
            <value><c>true</c> if this instance can move; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListEditor.AddCommand">
            <summary>
            Gets the add command.
            </summary>
            <value>The add command.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListEditor.RemoveCommand">
            <summary>
            Gets the remove command.
            </summary>
            <value>The remove command.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListEditor.CloneCommand">
            <summary>
            Gets the clone command.
            </summary>
            <value>The clone command.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListEditor.EditCommand">
            <summary>
            Gets the edit command.
            </summary>
            <value>The edit command.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListEditor.UpCommand">
            <summary>
            Gets up command.
            </summary>
            <value>Up command.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptListEditor.DownCommand">
            <summary>
            Gets down command.
            </summary>
            <value>Down command.</value>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptDynamicListEditor.FactoriesProperty">
            <summary>
            The factories property
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptDynamicListEditor.Add">
            <summary>
            Adds this instance.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptDynamicListEditor.Factories">
            <summary>
            Gets or sets the <see cref="T:Concept.Model.ConceptFactories"/>the collection of factories of the
            classes which can be added to the dynamic list.
            </summary>
            <value>The <see cref="T:Concept.Model.ConceptFactories"/>.</value>
        </member>
        <member name="T:Concept.Model.Wpf.IConceptViewProvider">
            <summary>
            Interface IConceptViewProvider
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.IConceptViewProvider.GetView(System.String)">
            <summary>
            Gets the view.
            </summary>
            <param name="subject">The subject.</param>
            <returns>FrameworkElement.</returns>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptElementToViewConverter">
            <summary>
            ConceptElementToViewConverter convert a ConceptElement to the
            suitable View.
            A specific subject can be specified on parameter.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptElementToViewConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.InvalidOperationException">The target must be a ConceptElement !</exception>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptElementToViewConverter.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="T:Concept.Model.Wpf.IConceptEditorProvider">
            <summary>
            Interface IConceptEditorProvider
            </summary>
            <remarks>Kept for Concept.Hmi 2012 Compatibility</remarks>
        </member>
        <member name="P:Concept.Model.Wpf.IConceptEditorProvider.EditControl">
            <summary>
            Gets the edit control.
            </summary>
            <value>The edit control.</value>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptElementToEditControlConverter">
            <summary>
            Class ConceptElementToEditControlConverter
            </summary>
            <remarks>Kept for Concept.Hmi 2012 Compatibility</remarks>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptElementToEditControlConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.InvalidOperationException">The target must be a ConceptElement !</exception>
        </member>
        <member name="T:Concept.Model.Wpf.IConceptImageProvider">
            <summary>
            Interface IConceptImageProvider
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.IConceptImageProvider.SmallImage">
            <summary>
            Gets the small image.
            </summary>
            <value>The small image.</value>
        </member>
        <member name="P:Concept.Model.Wpf.IConceptImageProvider.LargeImage">
            <summary>
            Gets the large image.
            </summary>
            <value>The large image.</value>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptElementToSmallImageConverter">
            <summary>
            Class ConceptElementToSmallImageConverter
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptElementToSmallImageConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.InvalidOperationException">The target must be a ConceptElement or ConceptFactory!</exception>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptElementToLargeImageConverter">
            <summary>
            Class ConceptElementToLargeImageConverter
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptElementToLargeImageConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.InvalidOperationException">The target must be a ConceptElement or ConceptFactory!</exception>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptObjectToConceptIconConverter">
            <summary>
            Class ConceptObjectToConceptIconConverter
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptObjectToConceptIconConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptMasterDetailEditor">
            <summary>
            Class ConceptMasterDetailEditor
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptMasterDetailEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ConceptMasterDetailEditor"/> class.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptMasterDetailEditor.CanDragDropProperty">
            <summary>
            The can drag drop property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptMasterDetailEditor.CanUserSelectItemProperty">
            <summary>
            The can user select item property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptMasterDetailEditor.IsDetailsVisibleProperty">
            <summary>
            The is details visible property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptMasterDetailEditor.IsAdvanceVisibleProperty">
            <summary>
            The IsAdvanceVisible property
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptMasterDetailEditor.CanDragDrop">
            <summary>
            Gets or sets a value indicating whether this instance can drag drop.
            </summary>
            <value><c>true</c> if this instance can drag drop; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptMasterDetailEditor.CanUserSelectItem">
            <summary>
            Gets or sets a value indicating whether this instance can user select item.
            </summary>
            <value><c>true</c> if this instance can user select item; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptMasterDetailEditor.IsDetailsVisible">
            <summary>
            Gets or sets a value indicating whether this instance is details visible.
            </summary>
            <value><c>true</c> if this instance is details visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptMasterDetailEditor.IsAdvanceVisible">
            <summary>
            Gets or sets a value indicating whether this instance is advance visible.
            </summary>
            <value><c>true</c> if this instance is advance visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptMasterDetailEditor.AdditionalCommands">
            <summary>
            Provides a list of additional commands that can be defined to add some behaviors to the control.
            These commands are depicted using buttons.
            </summary>
            <value>List of commands to add to the control</value>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptStaticListEditor">
            <summary>
            Class ConceptStaticListEditor
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptStaticListEditor.Add">
            <summary>
            Adds this instance.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptTreeView2013">
            <summary>
            Class ConceptTreeView2013
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptTreeView2013.RootViewModelPropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.ConceptTreeView2013.RootViewModel"/> property changed.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptTreeView2013.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ConceptTreeView2013"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptTreeView2013.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <remarks>
            Enables selecting the item when right-clicking
            </remarks>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was pressed.</param>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptTreeView2013.RootComponentProperty">
            <summary>
            The root component property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptTreeView2013.SelectedElementProperty">
            <summary>
            The selected element property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptTreeView2013.SubjectDisplayedProperty">
            <summary>
            The subject displayed property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptTreeView2013.ShowRootContainerProperty">
            <summary>
            The show root container property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptTreeView2013.AutoSelectFirstElementProperty">
            <summary>
            The auto select first element property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptTreeView2013.IsExpandedProperty">
            <summary>
            The is expanded property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptTreeView2013.ExpandLevelProperty">
            <summary>
            The expand level property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptTreeView2013.CollapseLevelProperty">
            <summary>
            The collapse level property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptTreeView2013.IsReadOnlyProperty">
            <summary>
            The readonly property
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeView2013.RootContainer">
            <summary>
            Gets or sets the root container.
            </summary>
            <value>The root container.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeView2013.SelectedElement">
            <summary>
            Gets or sets the selected element.
            </summary>
            <value>The selected element.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeView2013.SubjectsDisplayed">
            <summary>
            Gets or sets the subjects displayed.
            </summary>
            <value>The subjects displayed.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeView2013.ShowRootContainer">
            <summary>
            Gets or sets a value indicating whether [show root container].
            </summary>
            <value><c>true</c> if [show root container]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeView2013.AutoSelectFirstElement">
            <summary>
            Gets or sets a value indicating whether [auto select first element].
            </summary>
            <value><c>true</c> if [auto select first element]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeView2013.IsExpanded">
            <summary>
            Gets or sets a value indicating whether this instance is expanded.
            </summary>
            <value><c>true</c> if this instance is expanded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeView2013.ExpandLevel">
            <summary>
            Gets or sets the expand level.
            </summary>
            <value>The expand level.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeView2013.CollapseLevel">
            <summary>
            Gets or sets the collapse level.
            </summary>
            <value>The collapse level.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeView2013.IsReadOnly">
            <summary>
            Gets or sets the Concept treeview and its content to Read Only.
            </summary>
            <value>The readonly.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeView2013.RootViewModel">
            <summary>
            Gets the root view model.
            </summary>
            <value>The root view model.</value>
        </member>
        <member name="E:Concept.Model.Wpf.ConceptTreeView2013.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Concept.Model.Wpf.StringToListConverter">
            <summary>
            Class StringToListConverter
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.StringToListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.StringToListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object" /> to convert.</param>
            <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.StringToListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.StringToListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object" /> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to.</param>
            <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="T:Concept.Model.Wpf.EmptyListToCollapsedVisibilityConverter">
            <summary>
            Class EmptyListToCollapsedVisibilityConverter
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.EmptyListToCollapsedVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Concept.Model.Wpf.VisibilityInverterConverter">
            <summary>
            Class VisibilityInverterConverter
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.VisibilityInverterConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Concept.Model.Wpf.ItemsCountReadOnlyAndShowToVisibilityConverter">
            <summary>
            Class ItemsCountReadOnlyAndShowToVisibilityConverter
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ItemsCountReadOnlyAndShowToVisibilityConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified values.
            </summary>
            <param name="values">The values.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ItemsCountReadOnlyAndShowToVisibilityConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the back.
            </summary>
            <param name="value">The value.</param>
            <param name="targetTypes">The target types.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>System.Object[][].</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Concept.Model.Wpf.TreeViewItemAttachedBehavior">
            <summary>
            Exposes attached behaviors that can be
            applied to TreeViewItem objects.
            </summary>
        </member>
        <member name="T:Concept.Model.Wpf.BaseTreeViewModel">
            <summary>
            Class BaseTreeViewModel
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.BaseTreeViewModel.ChildrenPropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.BaseTreeViewModel.Children"/> property changed.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.BaseTreeViewModel.ModelPropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.BaseTreeViewModel.Model"/> property changed.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.BaseTreeViewModel.IsSelectedPropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.BaseTreeViewModel.IsSelected"/> property changed.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.BaseTreeViewModel.IsExpandedPropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.BaseTreeViewModel.IsExpanded"/> property changed.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.BaseTreeViewModel.#ctor(Concept.Model.Wpf.ConceptTreeView2013)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.BaseTreeViewModel"/> class.
            </summary>
            <param name="conceptTreeView">The concept tree view.</param>
        </member>
        <member name="F:Concept.Model.Wpf.BaseTreeViewModel._parentConceptTreeView">
            <summary>
            The _parent concept tree view
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.BaseTreeViewModel.OnModelChanged(System.Object,System.Object)">
            <summary>
            Called when [model changed].
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Concept.Model.Wpf.BaseTreeViewModel.ExpandToModel(System.Object)">
            <summary>
            Expands to model.
            </summary>
            <param name="model">The model.</param>
            <returns><c>true</c> if success, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.Wpf.BaseTreeViewModel.ExpandAll(System.UInt32)">
            <summary>
            Expands all.
            </summary>
            <param name="expandLevel">The expand level.</param>
            <returns><c>true</c> if success, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.Wpf.BaseTreeViewModel.CollapseAll(System.UInt32)">
            <summary>
            Collapse all.
            </summary>
            <param name="expandLevel">The collapse level.</param>
            <returns><c>true</c> if success, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.Wpf.BaseTreeViewModel.OnIsSelectedChanged">
            <summary>
            Called when [is selected changed].
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.BaseTreeViewModel.OnIsExpandedChanged">
            <summary>
            Called when [is expanded changed].
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.BaseTreeViewModel.DoPropertyChanged(System.String)">
            <summary>
            Does the property changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Concept.Model.Wpf.BaseTreeViewModel.Children">
            <summary>
            Gets the children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:Concept.Model.Wpf.BaseTreeViewModel.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Concept.Model.Wpf.BaseTreeViewModel.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Concept.Model.Wpf.BaseTreeViewModel.IsSelected">
            <summary>
            Gets or sets a value indicating whether this instance is selected.
            </summary>
            <value><c>true</c> if this instance is selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.BaseTreeViewModel.IsExpanded">
            <summary>
            Gets or sets a value indicating whether this instance is expanded.
            </summary>
            <value><c>true</c> if this instance is expanded; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Concept.Model.Wpf.BaseTreeViewModel.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Concept.Model.Wpf.TreeViewModelConceptElement">
            <summary>
            Class TreeViewModelConceptElement
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.TreeViewModelConceptElement.#ctor(Concept.Model.Wpf.ConceptTreeView2013)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.TreeViewModelConceptElement"/> class.
            </summary>
            <param name="conceptTreeView">The concept tree view.</param>
        </member>
        <member name="M:Concept.Model.Wpf.TreeViewModelConceptElement.OnModelChanged(System.Object,System.Object)">
            <summary>
            Called when [model changed].
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Concept.Model.Wpf.TreeViewModelConceptElement.ExpandToModel(System.Object)">
            <summary>
            Expands to model.
            </summary>
            <param name="model">The model.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.Wpf.TreeViewModelConceptElement.ExpandAll(System.UInt32)">
            <summary>
            Expands all.
            </summary>
            <param name="expandLevel">The expand level.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.Wpf.TreeViewModelConceptElement.CollapseAll(System.UInt32)">
            <summary>
            Collapse all.
            </summary>
            <param name="expandLevel">The collapse level.</param>
            <returns><c>true</c> if success, <c>false</c> otherwise</returns>
        </member>
        <member name="P:Concept.Model.Wpf.TreeViewModelConceptElement.ConceptElement">
            <summary>
            Gets the concept element.
            </summary>
            <value>The concept element.</value>
        </member>
        <member name="T:Concept.Model.Wpf.TreeViewModelOcfElement">
            <summary>
            Class TreeViewModelOcfElement
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.TreeViewModelOcfElement.#ctor(Concept.Model.Wpf.ConceptTreeView2013)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.BaseTreeViewModel"/> class.
            </summary>
            <param name="conceptTreeView">The concept tree view.</param>
        </member>
        <member name="M:Concept.Model.Wpf.TreeViewModelOcfElement.OnModelChanged(System.Object,System.Object)">
            <summary>
            Called when [model changed].
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Concept.Model.Wpf.TreeViewModelOcfElement.ExpandToModel(System.Object)">
            <summary>
            Expands to model.
            </summary>
            <param name="model">The model.</param>
            <returns><c>true</c> if success, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.Wpf.TreeViewModelOcfElement.ExpandAll(System.UInt32)">
            <summary>
            Expands all.
            </summary>
            <param name="expandLevel">The expand level.</param>
            <returns><c>true</c> if success, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.Wpf.TreeViewModelOcfElement.CollapseAll(System.UInt32)">
            <summary>
            Collapse all.
            </summary>
            <param name="expandLevel">The collapse level.</param>
            <returns><c>true</c> if success, <c>false</c> otherwise</returns>
        </member>
        <member name="P:Concept.Model.Wpf.TreeViewModelOcfElement.ConceptElement">
            <summary>
            Gets the concept element.
            </summary>
            <value>The concept element.</value>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptPluginsViewUserControl">
            <summary>
            Interaction logic for ConceptPluginsView.xaml
            </summary>
            <summary>
            ConceptPluginsViewUserControl
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptPluginsViewUserControl.EntryPluginFiles">
            <summary>
            The default value for CustomNode
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptPluginsViewUserControl.Separator">
            <summary>
            The separator
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptPluginsViewUserControl.AssembliesPropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.ConceptPluginsViewUserControl.Assemblies"/> property changed.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptPluginsViewUserControl.HasFilenameRemovedPropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.ConceptPluginsViewUserControl.HasFilenameRemoved"/> property changed.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptPluginsViewUserControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ConceptPluginsView"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptPluginsViewUserControl.RefreshDisplay">
            <summary>
            Refreshes the display.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptPluginsViewUserControl.CanRestoreProperty">
            <summary>
            The can restore property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptPluginsViewUserControl.CustomNodeProperty">
            <summary>
            The custom node property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptPluginsViewUserControl.IsStandaloneProperty">
            <summary>
            The is standalone property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptPluginsViewUserControl.PluginsSourceProperty">
            <summary>
            The plugins source property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptPluginsViewUserControl.AfterPuoRestorationEvent">
            <summary>
            The after puo restoration event
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptPluginsViewUserControl.BeforePuoRestorationEvent">
            <summary>
            The before puo restoration event
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptPluginsViewUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptPluginsViewUserControl.Assemblies">
            <summary>
            Gets the assemblies.
            </summary>
            <value>The assemblies.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptPluginsViewUserControl.HasFilenameRemoved">
            <summary>
            Gets or sets a value indicating whether this instance has filename removed.
            </summary>
            <value><c>true</c> if this instance has filename removed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptPluginsViewUserControl.CanRestore">
            <summary>
            Gets or sets a value indicating whether this instance can restore.
            </summary>
            <value><c>true</c> if this instance can restore; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptPluginsViewUserControl.CustomNode">
            <summary>
            Gets or sets the custom node.
            </summary>
            <value>The custom node.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptPluginsViewUserControl.IsStandalone">
            <summary>
            Gets or sets a value indicating whether this instance is standalone.
            </summary>
            <value><c>true</c> if this instance is standalone; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptPluginsViewUserControl.PluginsSource">
            <summary>
            Gets or sets the plugins source.
            </summary>
            <value>The plugins source.</value>
        </member>
        <member name="E:Concept.Model.Wpf.ConceptPluginsViewUserControl.AfterPuoRestoration">
            <summary>
            Occurs when [after puo restoration].
            </summary>
        </member>
        <member name="E:Concept.Model.Wpf.ConceptPluginsViewUserControl.BeforePuoRestoration">
            <summary>
            Occurs when [before puo restoration].
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptPluginsViewUserControl.FunctionRestore">
            <summary>
            Gets the function restore.
            </summary>
            <value>The function restore.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptPluginsViewUserControl.CommandAdd">
            <summary>
            Gets the command add.
            </summary>
            <value>The command add.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptPluginsViewUserControl.CommandRemove">
            <summary>
            Gets the command remove.
            </summary>
            <value>The command remove.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptPluginsViewUserControl.CommandRestore">
            <summary>
            Gets the command restore.
            </summary>
            <value>The command restore.</value>
        </member>
        <member name="E:Concept.Model.Wpf.ConceptPluginsViewUserControl.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Concept.Model.Wpf.ConfigurationPluginFilesEditor">
            <summary>
            Interaction logic for ConfigurationPluginFilesEditor.xaml
            </summary>
            <summary>
            ConfigurationPluginFilesEditor
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConfigurationPluginFilesEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ConfigurationPluginFilesEditor"/> class.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConfigurationPluginFilesEditor.PluginFilesProperty">
            <summary>
            The plugin files property
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConfigurationPluginFilesEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ConfigurationPluginFilesEditor.PluginFiles">
            <summary>
            Gets or sets the plugin files.
            </summary>
            <value>The plugin files.</value>
        </member>
        <member name="T:Concept.Model.Wpf.PluginDataGridUserControl">
            <summary>
            Interaction logic for PluginDataGrid.xaml
            </summary>
            <summary>
            PluginDataGridUserControl
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.PluginDataGridUserControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.PluginDataGrid"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.PluginDataGridUserControl.PluginsDataGrid_OnIsVisibleChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the OnIsVisibleChanged event of the PluginsDataGrid control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Concept.Model.Wpf.PluginDataGridUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Concept.Model.Wpf.ObservableConceptList">
            <summary>
            <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of <see cref="T:Concept.Model.ConceptElement"/> used to enable easy binding to a <see cref="T:Concept.Model.ConceptList"/>.
            The <see cref="T:Concept.Model.ConceptList"/> is encapsulated in the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ObservableConceptList.#ctor(Concept.Model.ConceptList)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ObservableConceptList"/> class.
            </summary>
            <param name="list">The <see cref="T:Concept.Model.ConceptList"/> to encapsulate.</param>
        </member>
        <member name="M:Concept.Model.Wpf.ObservableConceptList.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:CollectionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptEditor">
            <summary>
            Advanced <see cref="T:System.Windows.Controls.UserControl"/> used to represent and easily edit a model based on Concept.
            </summary>
            <summary>
            ConceptEditor
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptEditor.EditControlPropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.ConceptEditor.EditControl"/> property changed.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptEditor.TreeColumnWidthPropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.Wpf.ConceptEditor.TreeColumnWidth"/> property changed.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ConceptEditor"/> class.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptEditor.ElementProperty">
            <summary>
            The element property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptEditor.SelectedElementProperty">
            <summary>
            The selected element property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptEditor.IsExpandedProperty">
            <summary>
            The is expanded property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptEditor.ExpandLevelProperty">
            <summary>
            The expand level property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptEditor.CollapseLevelProperty">
            <summary>
            The expand level property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptEditor.IsReadOnlyProperty">
            <summary>
            The readonly property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptEditor.ShowRootContainerProperty">
            <summary>
            The show root container property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptEditor.ShowToolBarProperty">
            <summary>
            The show toolbar property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptEditor.ShowContextMenuProperty">
            <summary>
            The show context menu property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptEditor.AutoSelectFirstElementProperty">
            <summary>
            The auto select first element property
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptEditor.CurrentSubjectProperty">
            <summary>
            The current subject property
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptEditor.ResetHasChanged">
            <summary>
            Resets the has changed.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptEditor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptEditor.Element">
            <summary>
            Gets or sets the element.
            </summary>
            <value>The element.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptEditor.SelectedElement">
            <summary>
            Sets or Gets the selected <see cref="T:Concept.Model.ConceptElement"/> of the <see cref="F:Concept.Model.Wpf.ConceptEditor.ConceptTreeView"/>.
            </summary>
            <value>The selected <see cref="T:Concept.Model.ConceptElement"/>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptEditor.IsExpanded">
            <summary>
            Gets or sets a value indicating whether the <see cref="F:Concept.Model.Wpf.ConceptEditor.ConceptTreeView"/> in 
            the <see cref="T:Concept.Model.Wpf.ConceptEditor"/> is fully expanded.
            </summary>
            <value>
            	<c>true</c> if the <see cref="F:Concept.Model.Wpf.ConceptEditor.ConceptTreeView"/> is expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptEditor.ExpandLevel">
            <summary>
            Gets or sets the expand level of the <see cref="F:Concept.Model.Wpf.ConceptEditor.ConceptTreeView"/> in the <see cref="T:Concept.Model.Wpf.ConceptEditor"/>.
            </summary>
            <value>The expand level of the <see cref="F:Concept.Model.Wpf.ConceptEditor.ConceptTreeView"/> in the <see cref="T:Concept.Model.Wpf.ConceptEditor"/>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptEditor.CollapseLevel">
            <summary>
            Gets or sets the collapse level of the <see cref="F:Concept.Model.Wpf.ConceptEditor.ConceptTreeView"/> in the <see cref="T:Concept.Model.Wpf.ConceptEditor"/>.
            </summary>
            <value>The collapse level of the <see cref="F:Concept.Model.Wpf.ConceptEditor.ConceptTreeView"/> in the <see cref="T:Concept.Model.Wpf.ConceptEditor"/>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptEditor.IsReadOnly">
            <summary>
            Gets or sets the Concept editor and its content to Read Only.
            </summary>
            <value>The readonly.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptEditor.ShowRootContainer">
            <summary>
            Gets or sets a value indicating whether [show root container].
            </summary>
            <value><c>true</c> if [show root container]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptEditor.ShowToolBar">
            <summary>
            Gets or sets a value indicating whether [show toolbar].
            </summary>
            <value><c>true</c> if [show toolbar]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptEditor.ShowContextMenu">
            <summary>
            Gets or sets a value indicating whether [show context menu].
            </summary>
            <value><c>true</c> if [show context menu]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptEditor.AutoSelectFirstElement">
            <summary>
            Gets or sets a value indicating whether [auto select first element].
            </summary>
            <value><c>true</c> if [auto select first element]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptEditor.CurrentSubject">
            <summary>
            Gets or sets the current subject.
            </summary>
            <value>The current subject.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptEditor.KeepFirstElement">
            <summary>
            Gets or sets a value indicating whether [keep first element].
            </summary>
            <value><c>true</c> if [keep first element]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptEditor.EditControl">
            <summary>
            Gets or sets the edit control.
            </summary>
            <value>The edit control.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptEditor.TreeColumnWidth">
            <summary>
            Gets or sets the width of the tree column.
            </summary>
            <value>The width of the tree column.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptEditor.HasChanged">
            <summary>
            Gets a value indicating whether the root <see cref="T:Concept.Model.ConceptElement"/> of the <see cref="T:Concept.Model.Wpf.ConceptEditor"/> or one of this children has changed.
            </summary>
            <value>
            	<c>true</c> if the root <see cref="T:Concept.Model.ConceptElement"/> of the <see cref="T:Concept.Model.Wpf.ConceptEditor"/> or one of this children has changed.; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Concept.Model.Wpf.ConceptEditor.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptElementValidationEventArgs">
            <summary>
            Class ConceptElementValidationEventArgs
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptElementValidationEventArgs.#ctor(Concept.Model.ConceptElement,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ConceptElementValidationEventArgs"/> class.
            </summary>
            <param name="element">The element.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptElementValidationEventArgs.Element">
            <summary>
            Gets the element.
            </summary>
            <value>The element.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptElementValidationEventArgs.Subject">
            <summary>
            Gets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="T:Concept.Model.Wpf.SubjectToSubjectListConverter">
            <summary>
            Class SubjectToSubjectListConverter
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.SubjectToSubjectListConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.SubjectToSubjectListConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptTreeView">
            <summary>
            <see cref="T:System.Windows.Controls.UserControl"/> used to display a tree of <see cref="T:Concept.Model.ConceptElement"/> objects.
            All of the <see cref="T:Concept.Model.ConceptElement"/> objects in this tree can be selected to view their properties and to edit them.
            </summary>
            <summary>
            ConceptTreeView
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptTreeView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ConceptTreeView"/> class.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptTreeView.ElementProperty">
            <summary>
            The element property
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptTreeView.Refresh">
            <summary>
            Refreshes this instance.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptTreeView.RefreshSelectedItem">
            <summary>
            Refreshes the selected item.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptTreeView.Refresh(Concept.Model.ConceptElement,System.Boolean)">
            <summary>
            Refreshes the <see cref="T:Concept.Model.Wpf.ConceptEditor"/> with the values of the root <see cref="T:Concept.Model.ConceptElement"/> and its children.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptTreeView.ExpandAll">
            <summary>
            Expands all the <see cref="T:Concept.Model.ConceptElement"/> of the <see cref="T:Concept.Model.Wpf.ConceptTreeView"/>.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptTreeView.ExpandSelectedItem">
            <summary>
            Expands the selected <see cref="T:Concept.Model.ConceptElement"/> in the <see cref="T:Concept.Model.Wpf.ConceptTreeView"/>.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptTreeView.StartDrag(Concept.Utils.Wpf.DragInfo)">
            <summary>
            Queries whether a drag can be started.
            </summary>
            <param name="dragInfo">Information about the drag.</param>
            <remarks>To allow a drag to be started, the <see cref="P:Concept.Utils.Wpf.DragInfo.Effects"/> property on <paramref name="dragInfo"/>
            should be set to a value other than <see cref="F:System.Windows.DragDropEffects.None"/>.</remarks>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptTreeView.Dropped(Concept.Utils.Wpf.DropInfo)">
            <summary>
            Notifies the drag handler that a drop has occurred.
            </summary>
            <param name="dropInfo">Information about the drop.</param>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptTreeView.DoPropertyChanged(System.String)">
            <summary>
            Does the property changed.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptTreeView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeView.Element">
            <summary>
            Gets or sets the the root <see cref="T:Concept.Model.ConceptElement"/> of the <see cref="T:Concept.Model.Wpf.ConceptTreeView"/>.
            </summary>
            <value>The root <see cref="T:Concept.Model.ConceptElement"/>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeView.SelectedItem">
            <summary>
            Gets or sets the selected <see cref="T:Concept.Model.ConceptElement"/> of the <see cref="T:Concept.Model.Wpf.ConceptTreeView"/>.
            </summary>
            <value>The selected <see cref="T:Concept.Model.ConceptElement"/>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeView.SelectedElement">
            <summary>
            Gets the selected element.
            </summary>
            <value>The selected element.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeView.IsExpanded">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Concept.Model.Wpf.ConceptTreeView"/> is fully expanded.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:Concept.Model.Wpf.ConceptTreeView"/> is expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeView.ExpandLevel">
            <summary>
            Gets or sets the expand level of the <see cref="T:Concept.Model.Wpf.ConceptTreeView"/>.
            </summary>
            <value>The expand level of the <see cref="T:Concept.Model.Wpf.ConceptTreeView"/>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeView.DisplayAllItems">
            <summary>
            Gets or sets if the <see cref="T:Concept.Model.Wpf.ConceptTreeView"/> must consider IChildrenView interface.
            </summary>
            <value>The expand level of the <see cref="T:Concept.Model.Wpf.ConceptTreeView"/>.</value>
        </member>
        <member name="E:Concept.Model.Wpf.ConceptTreeView.SelectedItemChanged">
            <summary>
            Occurs when the selected <see cref="T:Concept.Model.ConceptElement"/> in the <see cref="T:Concept.Model.Wpf.ConceptTreeView"/> has changed.
            </summary>
        </member>
        <member name="E:Concept.Model.Wpf.ConceptTreeView.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptTreeViewView">
            <summary>
            <c>ViewModel</c> class used to connect the view (<see cref="T:Concept.Model.Wpf.ConceptTreeView"/>) to the model (the root <see cref="T:Concept.Model.ConceptElement"/>).
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptTreeViewView.#cctor">
            <summary>
            Initializes the <see cref="T:Concept.Model.Wpf.ConceptTreeViewView"/> class.
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptTreeViewView._count">
            <summary>
            The _count
            </summary>
        </member>
        <member name="F:Concept.Model.Wpf.ConceptTreeViewView._deletedCount">
            <summary>
            The _deleted count
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptTreeViewView.#ctor(Concept.Model.ConceptElement,Concept.Model.Wpf.ConceptTreeViewView,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ConceptTreeViewView"/> class.
            </summary>
            <param name="conceptElement">The root <see cref="T:Concept.Model.ConceptElement"/> to be passed to the <see cref="T:Concept.Model.Wpf.ConceptTreeView"/>.</param>
            <param name="container">The container.</param>
            <param name="displayAllItems">if set to <c>true</c> [display all items].</param>
            <param name="mustBeExpanded">if set to <c>true</c> [must be expanded].</param>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptTreeViewView.DoPropertyChanged(System.String)">
            <summary>
            Does the property changed.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptTreeViewView.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeViewView._countId">
            <summary>
            Gets or sets the _count id.
            </summary>
            <value>The _count id.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeViewView.DisplayAllItems">
            <summary>
            Gets or sets a value indicating whether [display all items].
            </summary>
            <value><c>true</c> if [display all items]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeViewView.Image">
            <summary>
            Gets the <c>SmallImage</c> property of the root <see cref="T:Concept.Model.ConceptElement"/> of the <see cref="T:Concept.Model.Wpf.ConceptTreeView"/>.
            </summary>
            <value>The <c>SmallImage</c> property of the root <see cref="T:Concept.Model.ConceptElement"/> of the <see cref="T:Concept.Model.Wpf.ConceptTreeView"/>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeViewView.ToolTip">
            <summary>
            Gets the tool tip.
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeViewView.Text">
            <summary>
            Gets the <c>DisplayName</c> property of the root <see cref="T:Concept.Model.ConceptElement"/> of the <see cref="T:Concept.Model.Wpf.ConceptTreeView"/>.
            </summary>
            <value>The <c>DisplayName</c> property of the root <see cref="T:Concept.Model.ConceptElement"/> of the <see cref="T:Concept.Model.Wpf.ConceptTreeView"/>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeViewView.Children">
            <summary>
            Gets the children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeViewView.Connections">
            <summary>
            Gets or sets the <c>Connections</c> (of type <see cref="T:Concept.Model.ConceptElement"/>) of the <see cref="T:Concept.Model.Wpf.ConceptTreeViewView"/>.
            </summary>
            <value>The <c>Connections</c> (of type <see cref="T:Concept.Model.ConceptElement"/>).</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeViewView.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeViewView.TreeViewItem">
            <summary>
            Gets or sets the <see cref="T:Concept.Model.Wpf.ConceptTreeView"/> of the <see cref="T:Concept.Model.Wpf.ConceptTreeViewView"/>.
            </summary>
            <value>The <see cref="T:Concept.Model.Wpf.ConceptTreeView"/> of the <see cref="T:Concept.Model.Wpf.ConceptTreeViewView"/>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeViewView.Element">
            <summary>
            Gets or sets the root <see cref="T:Concept.Model.ConceptElement"/> to be passed to the <see cref="T:Concept.Model.Wpf.ConceptTreeView"/>.
            </summary>
            <value>The root <see cref="T:Concept.Model.ConceptElement"/> to be passed to the <see cref="T:Concept.Model.Wpf.ConceptTreeView"/>.</value>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeViewView.IsPreLoaded">
            <summary>
            Gets or sets a value indicating whether this instance is pre loaded.
            </summary>
            <value><c>true</c> if this instance is pre loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Concept.Model.Wpf.ConceptTreeViewView.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptTreeViewView.MustBeExpanded">
            <summary>
            Gets or sets a value indicating whether [must be expanded].
            </summary>
            <value><c>true</c> if [must be expanded]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Concept.Model.Wpf.ConceptElementNameValidationRule">
            <summary>
            Class ConceptElementNameValidationRule
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptElementNameValidationRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ConceptElementNameValidationRule"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptElementNameValidationRule.#ctor(Concept.Model.ConceptElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.Wpf.ConceptElementNameValidationRule"/> class.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptElementNameValidationRule.Validate(System.Object,System.Globalization.CultureInfo)">
            <summary>
            When overridden in a derived class, performs validation checks on a value.
            </summary>
            <param name="value">The value from the binding target to check.</param>
            <param name="cultureInfo">The culture to use in this rule.</param>
            <returns>A <see cref="T:System.Windows.Controls.ValidationResult" /> object.</returns>
        </member>
        <member name="M:Concept.Model.Wpf.ConceptElementNameValidationRule.SetParameter(System.Object)">
            <summary>
            Sets the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <exception cref="T:System.NotSupportedException">ConceptElementNameValidationRule only supports a parameter of type ConceptElement</exception>
        </member>
        <member name="P:Concept.Model.Wpf.ConceptElementNameValidationRule.ConceptElement">
            <summary>
            Gets or sets the concept element.
            </summary>
            <value>The concept element.</value>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
