<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Concept.Model</name>
    </assembly>
    <members>
        <member name="T:Concept.Model.ConceptLinkDiagnostic">
            <summary>
            Enum ConceptLinkDiagnostic
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptLinkDiagnostic.Ok">
            <summary>
            The <see cref="T:Concept.Model.ConceptLink"/> is valid
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptLinkDiagnostic.Information">
            <summary>
            The <see cref="T:Concept.Model.ConceptLink"/> is on information
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptLinkDiagnostic.Warning">
            <summary>
            The <see cref="T:Concept.Model.ConceptLink"/> is on warning
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptLinkDiagnostic.Error">
            <summary>
            The <see cref="T:Concept.Model.ConceptLink"/> is on error
            </summary>
        </member>
        <member name="T:Concept.Model.ConceptLink">
            <summary>
            Class ConceptLink
            </summary>
        </member>
        <member name="T:Concept.Model.ConceptElement">
            <summary>
            Reprensents the based class of Concept framework. The Concept model is used to naturally reprensent
            the trade domain. Its rich mecanisms allow to reprensent easily list of components, components themselves
            and links between them.
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElement.PathSeparator">
            <summary>
            Define the separator used to separate the part of the path.
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElement.PathThis">
            <summary>
            Define the separator used in relative paths to specify the current element.
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElement.PathParent">
            <summary>
            Define the separator used in relative paths to specify the container of the current element.
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElement.NamePropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.ConceptElement.Name"/> property changed.
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElement.DisplayNamePropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.ConceptElement.DisplayName"/> property changed.
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElement.DiagnosticPropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.ConceptElement.Diagnostic"/> property changed.
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElement.DiagnosticMessagePropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.ConceptElement.DiagnosticMessage"/> property changed.
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElement.EntryName">
            <summary>
            Constant string to serialize the <see cref="P:Concept.Model.ConceptElement.Name"/> property.
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElement.EntryFactory">
            <summary>
            Constant string to serialize the <see cref="P:Concept.Model.ConceptElement.Factory"/> property.
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElement.EntryCount">
            <summary>
            Constant string to serialize the Count property.
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElement.EntryRoot">
            <summary>
            Constant string to serialize the <see cref="T:System.ComponentModel.Component"/> property.
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElement.EntryData">
            <summary>
            Constant string to serialize the Data property.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.CreateObjectFromNode(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,Concept.Model.ConceptContainer,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates and load a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> from a node.
            </summary>
            <param name="node">The node containing the factory to use and the data of the ConceptElement.</param>
            <param name="factories">The list of factories to use for the desirialisation of the ConceptElement.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
            <param name="container"> </param>
            <param name="subjects"> </param>
            <returns></returns>
        </member>
        <member name="M:Concept.Model.ConceptElement.SaveObjectToNode(Concept.Model.ConceptElement,Concept.Utils.IDataStoreNode,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> to a node.
            </summary>
            <param name="element">The ConceptElement to serialize</param>
            <param name="node">The node where the factory and the data will be saved.</param>
            <param name="subjects"> </param>
        </member>
        <member name="M:Concept.Model.ConceptElement.CreateObjectFromFile(System.String,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates and load a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> from a node.
            </summary>
            <param name="filename">The filename containing the factory tu use and the data of the ConceptElement.</param>
            <param name="factories">The list of factories to use for the desirialisation of the ConceptElement.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
            <param name="subjects">The subjects.</param>
            <returns>ConceptElement.</returns>
        </member>
        <member name="M:Concept.Model.ConceptElement.SaveObjectToFile(Concept.Model.ConceptElement,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> to a node.
            </summary>
            <param name="element">The ConceptElement to serialize</param>
            <param name="filename">The filename.</param>
            <param name="subjects">The subjects.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.#ctor">
            <summary>
            Constructor of the class
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Concept.Model.ConceptElement"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.HasParent(Concept.Model.ConceptContainer)">
            <summary>
            Determines whether the specified <see cref="T:Concept.Model.ConceptContainer">ConceptContainer</see> is part of the hierachy of
            the ConceptElement.
            </summary>
            <param name="container">The container to find.</param>
            <returns>
            	<c>true</c> if the specified container is a container of the ConceptElement; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:Concept.Model.ConceptElement.IdentityChanged">
            <summary>
            Occurs when the <c>Name</c> or the <c>Path</c> property are changed.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.DoChange(Concept.Model.ConceptElement)">
            <summary>
            Throws the event Change.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.AddRepository(Concept.Model.ConceptContainer)">
            <summary>
            Adds the repository.
            </summary>
            <param name="container">The container.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Concept.Model.ConceptElement.RemoveRepository(Concept.Model.ConceptContainer)">
            <summary>
            Removes the repository.
            </summary>
            <param name="container">The container.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Concept.Model.ConceptElement.ClearRepositories">
            <summary>
            Clears the repositories.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.OnPathChanged">
            <summary>
            Called when [path changed].
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.OnNameChanged">
            <summary>
            Called when [name changed].
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.OnContainerChanged">
            <summary>
            Called when [container changed].
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.AfterFactorySet">
            <summary>
            Afters the factory set.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.GetProvider``1">
            <summary>
            Gets the provider.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>``0.</returns>
            <exception cref="T:Concept.Utils.ConceptException"></exception>
        </member>
        <member name="M:Concept.Model.ConceptElement.GetHasProvider``1">
            <summary>
            Gets the has provider.
            </summary>
            <typeparam name="T"></typeparam>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.ConceptElement.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.RetrieveFactories(Concept.Model.ConceptFactories)">
            <summary>
            Retrieves the factories needed to deserialized the ConceptElement.
            </summary>
            <param name="factories">The factories needed and used to deserialized the ConceptElement.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.RetrieveProvidedFactories(Concept.Model.ConceptFactories,System.Predicate{Concept.Model.ConceptFactory})">
            <summary>
            Retrieves the factories of ProvidedComponent provided by the ConceptElement, filtered on a custom criteria.
            </summary>
            <param name="factories">The factories provided by the ConceptElement.</param>
            <param name="filter">A predicate that operates on a ConceptFactory, that should return true to make its argument factory included into the factories.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.RetrieveProvidedFactories(Concept.Model.ConceptFactories,System.Type)">
            <summary>
            Retrieves the factories of ProvidedComponent of a base type, provided by the ConceptElement.
            </summary>
            <param name="factories">The factories provided by the ConceptElement.</param>
            <param name="baseType">The base type of the element created by the factories that will be selected.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.RetrieveProvidedFactories(Concept.Model.ConceptFactories)">
            <summary>
            Retrieves the factories of ProvidedComponent provided by the ConceptElement.
            </summary>
            <param name="factories">The factories provided by the ConceptElement.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.RetrieveAllFactories(Concept.Model.ConceptFactories,System.Type)">
            <summary>
            Retrieves all the factories required by the ConceptElement.
            </summary>
            <param name="factories">The factories provided by the ConceptElement.</param>
            <param name="baseType">The base type.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.IsFactoryValid(Concept.Model.ConceptFactory,System.Type)">
            <summary>
            Tests if a factory is valid for the current class, depending on the base type.
            This method can be overriden to dynamically change the validity of factories.
            </summary>
            <param name="factorie">The factory to test.</param>
            <param name="baseType">The base type.</param>
            <returns>
            A <see cref="!:System.Bool"/> that represents the validity of the factory.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptElement.RetrieveAllFactories``1(Concept.Model.ConceptFactories)">
            <summary>
            Retrieves all factories.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factories">The factories.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.RetrieveAllFactories(Concept.Model.ConceptFactories)">
            <summary>
            Retrieves all the factories required by the ConceptElement.
            </summary>
            <param name="factories">The factories provided by the ConceptElement.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector)">
            <summary>
            Load a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> from a node.
            </summary>
            <param name="node">The node containing the data of the ConceptElement.</param>
            <param name="factories">The list of factories to use for the desirialisation of the ConceptElement.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.String)">
            <summary>
            Load a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> from a node.
            </summary>
            <param name="node">The node containing the data of the ConceptElement.</param>
            <param name="factories">The list of factories to use for the desirialisation of the ConceptElement.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
            <param name="subject">The subject that will be read.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reads from.
            </summary>
            <param name="node">The node.</param>
            <param name="factories">The factories.</param>
            <param name="messageCollector">The message collector.</param>
            <param name="subjects">The subjects.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.WriteTo(Concept.Utils.IDataStoreNode)">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> to a node.
            </summary>
            <param name="node">The node where the data will be saved.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.WriteTo(Concept.Utils.IDataStoreNode,System.String)">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> of a specific subject to a node.
            </summary>
            <param name="node">The node where the data will be saved.</param>
            <param name="subject">The subject that will be saved.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.WriteTo(Concept.Utils.IDataStoreNode,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes to.
            </summary>
            <param name="node">The node.</param>
            <param name="subjects">The subjects.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.GetHashCode(System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Serves as a hash function for to detect changes of a ConceptElement.
            </summary>
            <param name="recursive">Define if the hash must look in the Items</param>
            <param name="subjects">The list of subjects to include in the hash</param>
            <returns>
            A <see cref="T:System.String"/> that represents the code.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptElement.LoadFromFile(System.String,Concept.Utils.IMessageCollector)">
            <summary>
            Load a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> from a node, using all the factories of the PluginClassManager.
            </summary>
            <param name="fileName">The file containing the data of the ConceptElement.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.LoadFromFile(System.String,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector)">
            <summary>
            Load a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> from a node.
            </summary>
            <param name="fileName">The file containing the data of the ConceptElement.</param>
            <param name="factories">The list of factories to use for the deserialisation of the ConceptElement.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.LoadFromFile(System.String,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.String)">
            <summary>
            Load a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> from a node of specific subject.
            </summary>
            <param name="fileName">The file containing the data of the ConceptElement.</param>
            <param name="factories">The list of factories to use for the deserialisation of the ConceptElement.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
            <param name="subject">The subject that will be load.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.SaveToFile(System.String)">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> to a node.
            </summary>
            <param name="fileName">The file where the data will be saved.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.SaveToFile(System.String,System.String)">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> of a specific subject to a node.
            </summary>
            <param name="fileName">The file where the data will be saved.</param>
            <param name="subject">Subject specify the serialization.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptElement.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A cloned <see cref="T:Concept.Model.ConceptElement"/>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptElement.CopyFrom(Concept.Model.ConceptElement)">
            <summary>
            Copies the values of the properties of the source <see cref="T:Concept.Model.ConceptElement"/> to the instance.
            </summary>
            <param name="source">The source used for the copy. The instance and the source should be of the same type</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.SetDefaultValues">
            <summary>
            Sets the default values to the properties of the <see cref="T:Concept.Model.ConceptElement"/>.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.DoPropertyChanged(System.String)">
            <summary>
            Does the property changed.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="F:Concept.Model.ConceptElement._IsDisposing">
            <summary>
            A flag that provide the disposing state.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.HasSpecificSubject(System.String)">
            <summary>
            Determines whether [has specific subject] [the specified subject].
            </summary>
            <param name="subject">The subject.</param>
            <returns><c>true</c> if [has specific subject] [the specified subject]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptElement.NotifySubject(Concept.Model.ConceptElement,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Notifies the subject.
            </summary>
            <param name="element">The element.</param>
            <param name="subjects">The subjects.</param>
            <param name="add">if set to <c>true</c> [add].</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.InitializeSubject(System.Boolean)">
            <summary>
            Initializes the subject.
            </summary>
            <param name="notify">if set to <c>true</c> [notify].</param>
        </member>
        <member name="P:Concept.Model.ConceptElement.Name">
            <summary>
            Gets or sets the name of the ConceptElement. The name is used as an id 
            for the identification of an element in a list.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.IsNameEditable">
            <summary>
            Gets a value indicating whether this instance is name editable.
            </summary>
            <value><c>true</c> if this instance is name editable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.DisplayName">
            <summary>
            Gets the display name. This property can be translate with the <see cref="T:Concept.Utils.Intl">Intl</see> mecanism.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.Path">
            <summary>
            Gets the path of the ConceptElement. The path is built appending the name of each Container of the ConceptElement. 
            The top <see cref="T:Concept.Model.ConceptContainer">ConceptContainer</see> is called the Root.
            </summary>
            <value>The path of the ConceptElement.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.Container">
            <summary>
            Gets or sets the container of the ConceptElement. The <see cref="T:Concept.Model.ConceptContainer">ConceptContainer</see>
            is the ConceptElement that directly owns the element.
            </summary>
            <value>The container of the ConceptElement.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.RootContainer">
            <summary>
            Gets the root container of the ConceptElement. The <see cref="T:Concept.Model.ConceptContainer">ConceptContainer</see>
            is the ConceptElement in the top of the hierachical structur.
            </summary>
            <value>The root container of the ConceptElement.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.Options">
            <summary>
            The <c>Options</c> proprety allows to specify :
            <list type="Option">
                <listheader>
                    <term>Name</term>
                    <description>Description</description>
                </listheader>
                <item>
                    <term>NotSerialized</term>
                    <description>The ConceptElement will not be serialized.</description>
                </item>
            </list>
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptElement.Diagnostic">
            <summary>
            Gets the diagnostic of the ConceptElement. The property indicates if the ConceptElement is in a
            correct state.
            </summary>
            <value>The diagnostic of the ConceptElement.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.DiagnosticMessage">
            <summary>
            Gets or sets the diagnostic message.
            </summary>
            <value>The diagnostic message.</value>
        </member>
        <member name="E:Concept.Model.ConceptElement.Changed">
            <summary>
            Occurs when the element or a child has been modified.
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptElement.Repositories">
            <summary>
            Gets the repositories.
            </summary>
            <value>The repositories.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.HasRepository">
            <summary>
            Gets a value indicating whether this instance has repository.
            </summary>
            <value><c>true</c> if this instance has repository; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.Tag">
            <summary>
            Gets or sets the object that contains data about the control.
            </summary>
            <value>The Object that contains data about the control. The default is null.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.Factory">
            <summary>
            Gets or sets the factory of the ConceptElement. The <see cref="T:Concept.Model.ConceptFactory">factory</see> is
            used to create the ConceptElement from a string identifying the matching factory.
            </summary>
            <value>The factory used to create the ConceptElement.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.Provider">
            <summary>
            Gets the provider.
            </summary>
            <value>The provider.</value>
            <exception cref="T:Concept.Utils.ConceptException"></exception>
        </member>
        <member name="P:Concept.Model.ConceptElement.HasProvider">
            <summary>
            Gets a value indicating whether this instance has provider.
            </summary>
            <value><c>true</c> if this instance has provider; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Concept.Model.ConceptElement.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptElement.IsSubjectEnabled">
            <summary>
            Gets a value indicating whether this instance is subject enabled.
            </summary>
            <value><c>true</c> if this instance is subject enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.DeclaredSubjects">
            <summary>
            Gets the subjects declared by metadata on the concept element.
            </summary>
            <value>The subjects.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.Subjects">
            <summary>
            Gets the subjects.
            </summary>
            <value>The subjects.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.AllSubjects">
            <summary>
            Gets all subjects.
            </summary>
            <value>All subjects.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.HasDefaultSubject">
            <summary>
            Gets a value indicating whether this instance has default subject.
            </summary>
            <value><c>true</c> if this instance has default subject; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.HasSubject">
            <summary>
            Gets a value indicating whether this instance has subject.
            </summary>
            <value><c>true</c> if this instance has subject; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Concept.Model.ConceptLink.DisplayValuePropertyName">
            <summary>
            Gets the display value.
            </summary>
            <value>The display value.</value>
        </member>
        <member name="F:Concept.Model.ConceptLink.LinkDiagnosticPropertyName">
            <summary>
            Gets the link <see cref="T:Concept.Model.ConceptLinkDiagnostic">diagnostic</see>.
            </summary>
            <value>The link <see cref="T:Concept.Model.ConceptLinkDiagnostic">diagnostic</see>.</value>
        </member>
        <member name="F:Concept.Model.ConceptLink.EntryLinkPath">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.ConceptSingleLink.LinkPath"/> property serialization.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptLink"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptLink.IsLinkedTo(Concept.Model.ConceptElement)">
            <summary>
            Determines whether [is linked to] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if [is linked to] [the specified item]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptLink.CanAccept(Concept.Model.ConceptElement)">
            <summary>
            Determines whether this instance can accept the specified item.
            </summary>
            <param name="element">The item.</param>
            <returns><c>true</c> if this instance can accept the specified item; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptLink.ReleaseReferences(System.Boolean)">
            <summary>
            Releases the references.
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptLink.LinkChanged">
            <summary>
            The link changed
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptLink.BeforeLinkChanged">
            <summary>
            The before link changed
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptLink.LinkedItemPath(Concept.Model.ConceptElement)">
            <summary>
            Linkeds the item path.
            </summary>
            <param name="item">The item.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Concept.Model.ConceptLink.ResolveLink(System.String)">
            <summary>
            Resolves the link.
            </summary>
            <param name="path">The path.</param>
            <returns>ConceptElement.</returns>
        </member>
        <member name="M:Concept.Model.ConceptLink.OnChange">
            <summary>
            Called when [change].
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptLink.OnBeforeChange">
            <summary>
            Called when [before change].
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptLink.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Concept.Model.ConceptLink.LinkedToElement">
            <summary>
            Gets or sets a value indicating whether [linked to element].
            </summary>
            <value><c>true</c> if [linked to element]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.ConceptLink.DiagnosticText">
            <summary>
            Gets the diagnostic text.
            </summary>
            <value>The diagnostic text.</value>
        </member>
        <member name="P:Concept.Model.ConceptLink.ItemType">
            <summary>
            Gets the type of the item.
            </summary>
            <value>The type of the item.</value>
        </member>
        <member name="P:Concept.Model.ConceptLink.Referentials">
            <summary>
            Gets or sets the referentials.
            </summary>
            <value>The referentials.</value>
        </member>
        <member name="E:Concept.Model.ConceptLink.Filter">
            <summary>
            Occurs when [filter].
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptLink.LinkableObjects">
            <summary>
            Gets the linkable objects.
            </summary>
            <value>The linkable objects.</value>
        </member>
        <member name="T:Concept.Model.ConceptRegistry">
            <summary>
            Class ConceptRegistry
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptRegistry.RegisterReferential(Concept.Model.ConceptContainer)">
            <summary>
            Registers the referential.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Concept.Model.ConceptRegistry.UnregisterReferential(Concept.Model.ConceptContainer)">
            <summary>
            Unregisters the referential.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Concept.Model.ConceptRegistry.ReleaseReferences(Concept.Model.ConceptContainer)">
            <summary>
            Releases the references.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Concept.Model.ConceptRegistry.FindReferentialByName(System.String)">
            <summary>
            Finds the name of the referential by.
            </summary>
            <param name="name">The name.</param>
            <returns>ConceptContainer.</returns>
        </member>
        <member name="P:Concept.Model.ConceptRegistry.Registry">
            <summary>
            Gets the registry.
            </summary>
            <value>The registry.</value>
        </member>
        <member name="T:Concept.Model.ConceptSingleLink">
            <summary>
            Class ConceptSingleLink
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptSingleLink.LinkPathPropertyName">
            <summary>
            Gets or sets the link path.
            </summary>
            <value>The link path.</value>
        </member>
        <member name="F:Concept.Model.ConceptSingleLink.ReferencePropertyName">
            <summary>
            Gets or sets the reference.
            </summary>
            <value>The reference.</value>
        </member>
        <member name="M:Concept.Model.ConceptSingleLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptSingleLink"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptSingleLink.IsLinkedTo(Concept.Model.ConceptElement)">
            <summary>
            Determines whether [is linked to] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if [is linked to] [the specified item]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptSingleLink.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptSingleLink.WriteTo(Concept.Utils.IDataStoreNode)">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> to a node.
            </summary>
            <param name="node">The node where the data will be saved.</param>
        </member>
        <member name="M:Concept.Model.ConceptSingleLink.WriteTo(Concept.Utils.IDataStoreNode,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes to.
            </summary>
            <param name="node">The node.</param>
            <param name="subjects">The subjects.</param>
        </member>
        <member name="M:Concept.Model.ConceptSingleLink.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector)">
            <summary>
            Load a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> from a node.
            </summary>
            <param name="node">The node containing the data of the ConceptElement.</param>
            <param name="factories">The list of factories to use for the desirialisation of the ConceptElement.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
        </member>
        <member name="M:Concept.Model.ConceptSingleLink.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reads from.
            </summary>
            <param name="node">The node.</param>
            <param name="factories">The factories.</param>
            <param name="messageCollector">The message collector.</param>
            <param name="subjects">The subjects.</param>
        </member>
        <member name="M:Concept.Model.ConceptSingleLink.ReleaseReferences(System.Boolean)">
            <summary>
            Releases the references.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptSingleLink.GetHashCode(System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Serves as a hash function for to detect changes of a ConceptElement.
            </summary>
            <param name="recursive">Define if the hash must look in the Items</param>
            <param name="subjects">The list of subjects to include in the hash</param>
            <returns>
            A <see cref="T:System.String"/> that represents the code.
            </returns>
        </member>
        <member name="P:Concept.Model.ConceptSingleLink.DisplayValue">
            <summary>
            Gets the display value.
            </summary>
            <value>The display value.</value>
        </member>
        <member name="P:Concept.Model.ConceptSingleLink.LinkDiagnostic">
            <summary>
            Gets the link <see cref="T:Concept.Model.ConceptLinkDiagnostic">diagnostic</see>.
            </summary>
            <value>The link <see cref="T:Concept.Model.ConceptLinkDiagnostic">diagnostic</see>.</value>
        </member>
        <member name="P:Concept.Model.ConceptSingleLink.DiagnosticText">
            <summary>
            Gets the diagnostic text.
            </summary>
            <value>The diagnostic text.</value>
        </member>
        <member name="P:Concept.Model.ConceptSingleLink.ElementLinked">
            <summary>
            Gets or sets a value indicating whether [element linked].
            </summary>
            <value><c>true</c> if [element linked]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.ConceptSingleLink.Defined">
            <summary>
            Gets a value indicating whether this <see cref="T:Concept.Model.ConceptSingleLink"/> is defined.
            </summary>
            <value><c>true</c> if defined; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.ConceptSingleLink.CheckedReference">
            <summary>
            Gets the checked reference.
            </summary>
            <value>The checked reference.</value>
            <exception cref="T:Concept.Utils.ConceptException"></exception>
        </member>
        <member name="P:Concept.Model.ConceptSingleLink.ValidReference">
            <summary>
            Gets a value indicating whether [valid reference].
            </summary>
            <value><c>true</c> if [valid reference]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.ConceptSingleLink.Mandatory">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Concept.Model.ConceptSingleLink"/> is mandatory.
            </summary>
            <value><c>true</c> if mandatory; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Concept.Model.ConceptSingleLink`1">
             <summary>
             Class ConceptSingleLink
             </summary>
             <remarks>
             The class T can be n derived class of ConceptElement or an Interface.
             Nevertheless, the instance that will be linked must be a ConceptElement.
            </remarks>
             <typeparam name="T"></typeparam>
        </member>
        <member name="M:Concept.Model.ConceptSingleLink`1.CanAccept(Concept.Model.ConceptElement)">
            <summary>
            Determines whether this instance can accept the specified _object.
            </summary>
            <param name="element">The _object.</param>
            <returns><c>true</c> if this instance can accept the specified _object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Concept.Model.ConceptSingleLink`1.Reference">
            <summary>
            Gets or sets the reference.
            </summary>
            <value>The reference.</value>
        </member>
        <member name="P:Concept.Model.ConceptSingleLink`1.CheckedReference">
            <summary>
            Gets the checked reference.
            </summary>
            <value>The checked reference.</value>
        </member>
        <member name="P:Concept.Model.ConceptSingleLink`1.ItemType">
            <summary>
            Gets the type of the item.
            </summary>
            <value>The type of the item.</value>
        </member>
        <member name="T:Concept.Model.ConceptMultipleLink">
            <summary>
            Class ConceptMultipleLink
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptMultipleLink.LinkPathsPropertyName">
            <summary>
            Gets or sets the link paths.
            </summary>
            <value>The link paths.</value>
        </member>
        <member name="F:Concept.Model.ConceptMultipleLink.ReferencesPropertyName">
            <summary>
            Gets or sets the references.
            </summary>
            <value>The references.</value>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptMultipleLink"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.IsLinkedTo(Concept.Model.ConceptElement)">
            <summary>
            Determines whether [is linked to] [the specified element].
            </summary>
            <param name="element">The element.</param>
            <returns><c>true</c> if [is linked to] [the specified element]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.WriteTo(Concept.Utils.IDataStoreNode)">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> to a node.
            </summary>
            <param name="node">The node where the data will be saved.</param>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.WriteTo(Concept.Utils.IDataStoreNode,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes to.
            </summary>
            <param name="node">The node.</param>
            <param name="subjects">The subjects.</param>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector)">
            <summary>
            Load a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> from a node.
            </summary>
            <param name="node">The node containing the data of the ConceptElement.</param>
            <param name="factories">The list of factories to use for the desirialisation of the ConceptElement.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reads from.
            </summary>
            <param name="node">The node.</param>
            <param name="factories">The factories.</param>
            <param name="messageCollector">The message collector.</param>
            <param name="subjects">The subjects.</param>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.ReleaseReferences(System.Boolean)">
            <summary>
            Releases the references.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.GetHashCode(System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Serves as a hash function for to detect changes of a ConceptElement.
            </summary>
            <param name="recursive">Define if the hash must look in the Items</param>
            <param name="subjects">The list of subjects to include in the hash</param>
            <returns>
            A <see cref="T:System.String"/> that represents the code.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.AddReference(Concept.Model.ConceptElement)">
            <summary>
            Adds the reference.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.RemoveReference(Concept.Model.ConceptElement)">
            <summary>
            Adds the reference.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.IsReferenceValid(Concept.Model.ConceptElement)">
            <summary>
            Determines whether [is reference valid] [the specified reference].
            </summary>
            <param name="reference">The reference.</param>
            <returns><c>true</c> if [is reference valid] [the specified reference]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="F:Concept.Model.ConceptMultipleLink.PathList">
            <summary>
            The path list
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink.ElementLinked">
            <summary>
            Gets or sets a value indicating whether [element linked].
            </summary>
            <value><c>true</c> if [element linked]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink.DisplayValue">
            <summary>
            Gets the display value.
            </summary>
            <value>The display value.</value>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink.LinkDiagnostic">
            <summary>
            Gets the link <see cref="T:Concept.Model.ConceptLinkDiagnostic">diagnostic</see>.
            </summary>
            <value>The link <see cref="T:Concept.Model.ConceptLinkDiagnostic">diagnostic</see>.</value>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink.DiagnosticText">
            <summary>
            Gets the diagnostic text.
            </summary>
            <value>The diagnostic text.</value>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink.CheckedReferences">
            <summary>
            Gets the checked references.
            </summary>
            <value>The checked references.</value>
            <exception cref="T:Concept.Utils.ConceptException"></exception>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink.AllReferencesValid">
            <summary>
            Gets a value indicating whether [all references valid].
            </summary>
            <value><c>true</c> if [all references valid]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink.MinCount">
            <summary>
            Gets or sets the min count.
            </summary>
            <value>The min count.</value>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink.MaxCount">
            <summary>
            Gets or sets the max count.
            </summary>
            <value>The max count.</value>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink.HasValidReference">
            <summary>
            Gets a value indicating whether this instance has valid reference.
            </summary>
            <value><c>true</c> if this instance has valid reference; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Concept.Model.ConceptMultipleLink`1">
            <summary>
            Class ConceptMultipleLink
            </summary>
            <remarks>
            The class T can be a derived class of ConceptElement or an Interface.
            Nevertheless, the instance that will be linked must be a ConceptElement.
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink`1.CanAccept(Concept.Model.ConceptElement)">
            <summary>
            Determines whether this instance can accept the specified _object.
            </summary>
            <param name="element">The _object.</param>
            <returns><c>true</c> if this instance can accept the specified _object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink`1.IsReferenceValid(Concept.Model.ConceptElement)">
            <summary>
            Determines whether [is reference valid] [the specified reference].
            </summary>
            <param name="reference">The reference.</param>
            <returns><c>true</c> if [is reference valid] [the specified reference]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink`1.References">
            <summary>
            Gets or sets the references.
            </summary>
            <value>The references.</value>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink`1.CheckedReferences">
            <summary>
            Gets the checked references.
            </summary>
            <value>The checked references.</value>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink`1.ValidReferences">
            <summary>
            Gets the valid references.
            </summary>
            <value>The valid references.</value>
        </member>
        <member name="T:Concept.Model.ConceptDynamicComponent">
            <summary>
            Represents the base class for the component containing a polymorphous element. As a 
            <see cref="T:Concept.Model.ConceptElement"/>, this class has the mecanism allow serialization and
            deserialisation from/to a node or a file. When deserializing, the <see cref="T:Concept.Model.ConceptList"/>
            will create dynamically the instance of <see cref="T:Concept.Model.ConceptElement"/> using the <see cref="T:Concept.Model.ConceptFactory"/>
            described in the node/file.
            </summary>
        </member>
        <member name="T:Concept.Model.ConceptContainer">
            <summary>
            Reprensents the base class of all <see cref="T:Concept.Model.ConceptElement"/> that are composed by other ConceptElement.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptContainer.GetPropertyInfos(System.Type)">
            <summary>
            Gets the property infos.
            </summary>
            <param name="type">The type.</param>
            <returns>IEnumerable{BaseConceptPropertyInfo}.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.GetPropertyInfosToSerialize(System.Type)">
            <summary>
            Gets the property infos to serialize.
            </summary>
            <param name="type">The type.</param>
            <returns>SubjectedConceptProperties.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.RetrieveInfo(System.Type)">
            <summary>
            Retrieves the info.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.GetPropertyInfo(System.Type,Concept.Model.ConceptElement)">
            <summary>
            Gets the property info.
            </summary>
            <param name="containerType">Type of the container.</param>
            <param name="element">The element.</param>
            <returns>PropertyInfo.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptContainer"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptContainer.OnPathChanged">
            <summary>
            Called when [path changed].
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptContainer.IsNameUnique(Concept.Model.ConceptElement,System.String)">
            <summary>
            Determines whether the name of the <see cref="T:Concept.Model.ConceptElement"/> is already used in the internal list. The name must be unique.
            </summary>
            <param name="element">The <see cref="T:Concept.Model.ConceptElement"/> which want to know if the name is unique.</param>
            <param name="name">The name to verify.</param>
            <returns>
            	<c>true</c> if the name is not used in the list; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Find(System.String)">
            <summary>
            Finds the <see cref="T:Concept.Model.ConceptElement"/> matching to the specified path.
            </summary>
            <param name="path">The path of the searched <see cref="T:Concept.Model.ConceptElement"/>.</param>
            <returns>Returns a <see cref="T:Concept.Model.ConceptElement"/> if the path is valid; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.CheckNameUniqueness(Concept.Model.ConceptElement,System.String)">
            <summary>
            Checks if the name of the <see cref="T:Concept.Model.ConceptElement"/> is already used in the internal list. The name must be unique. 
            If the name is already used, an <see cref="T:Concept.Utils.ConceptException"/> is thrown.
            </summary>
            <param name="item">The <see cref="T:Concept.Model.ConceptElement"/> which want to know if the name is unique.</param>
            <param name="name">The name to verify.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.GenerateUniqueName(Concept.Model.ConceptElement,System.String)">
            <summary>
            Generates a unique identifier which can be used by a <see cref="T:Concept.Model.ConceptElement"/> which will be added to the <see cref="T:Concept.Model.ConceptContainer"/>
            </summary>
            <param name="item">The <see cref="T:Concept.Model.ConceptElement"/> which want to know if the name is unique.</param>
            <param name="baseName">A base name used to generate the unique name.</param>
            <returns>Returns a unique name.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.IndexOf(Concept.Model.ConceptElement)">
            <summary>
            Retrieves the index of the <see cref="T:Concept.Model.ConceptElement"/> in the internal list.
            </summary>
            <param name="item">The item to find in the internal list.</param>
            <returns>Returns the index of the <see cref="T:Concept.Model.ConceptElement"/> if it has been found in the internal list; otherwise, <c>-1</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Contains(Concept.Model.ConceptElement)">
            <summary>
            Determines whether the internal list contains the <see cref="T:Concept.Model.ConceptElement"/>.
            </summary>
            <param name="item">The item to verify.</param>
            <returns>
            	<c>true</c> if the internal list container the <see cref="T:Concept.Model.ConceptElement"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.InternalRemove(Concept.Model.ConceptElement)">
            <summary>
            Internals the remove.
            </summary>
            <param name="item">The concept.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.InternalAdd(Concept.Model.ConceptElement)">
            <summary>
            Internals the add.
            </summary>
            <param name="item">The concept.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Add(Concept.Model.ConceptElement)">
            <summary>
            Adds the specified item to the internal list of the <see cref="T:Concept.Model.ConceptContainer"/>.
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.AddNew(Concept.Model.ConceptFactory,System.String)">
            <summary>
            Creates a new instance of a <see cref="T:Concept.Model.ConceptElement"/> based object with the <see cref="T:Concept.Model.ConceptFactory"/> and
            adds it to the internal list of th <see cref="T:Concept.Model.ConceptContainer"/>.
            </summary>
            <param name="factory">The factory used to create the new instance.</param>
            <param name="name">The name of the new item. If this name is already used in the internal list, an exception will be thrown.</param>
            <returns>Returns the new item that has been added.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.AddNew(Concept.Model.ConceptFactory)">
            <summary>
            Creates a new instance of a <see cref="T:Concept.Model.ConceptElement"/> based object with the <see cref="T:Concept.Model.ConceptFactory"/> and
            adds it to the internal list of th <see cref="T:Concept.Model.ConceptContainer"/>.
            </summary>
            <param name="factory">The factory used to create the new instance.</param>
            <returns>Returns the new item that has been added.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.AddNew``1(System.String)">
            <summary>
            Creates a new instance of a <see cref="T:Concept.Model.ConceptElement"/> based object with the <see cref="T:Concept.Model.ConceptFactory"/> and
            adds it to the internal list of th <see cref="T:Concept.Model.ConceptContainer"/>.
            </summary>
            <typeparam name="T">The type of the new <see cref="T:Concept.Model.ConceptElement"/> to instanciate.</typeparam>
            <param name="name">The name of the new item. If this name is already used in the internal list, an exception will be thrown.</param>
            <returns>Returns the new item that has been added.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.AddNew``1">
            <summary>
            Creates a new instance of a <see cref="T:Concept.Model.ConceptElement"/> based object with the <see cref="T:Concept.Model.ConceptFactory"/> and
            adds it to the internal list of th <see cref="T:Concept.Model.ConceptContainer"/>.
            </summary>
            <typeparam name="T">The type of the new <see cref="T:Concept.Model.ConceptElement"/> to instanciate.</typeparam>
            <returns>Returns the new item that has been added.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Insert(System.Int32,Concept.Model.ConceptElement)">
            <summary>
            Inserts the specified <see cref="T:Concept.Model.ConceptElement"/> at the specified index in the internal list.
            </summary>
            <param name="index">The index where the item must be added.</param>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Remove(Concept.Model.ConceptElement)">
            <summary>
            Removes the specified item of the internal list. The item will be disposed.
            </summary>
            <param name="item">The item to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Remove(Concept.Model.ConceptElement,System.Boolean)">
            <summary>
            Removes the specified item of the internal list.
            </summary>
            <param name="item">The item to remove.</param>
            <param name="dispose">if set to <c>true</c>, the item will be dispose if it implements <see cref="T:System.IDisposable"/>.</param>
            <returns>Returns <c>true</c> if the item could be removed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.RemoveAt(System.Int32)">
            <summary>
            Removes the element present at the specified index in the internal list.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Move(System.Int32,System.Int32)">
            <summary>
            Moves a item in the internal list of the <see cref="T:Concept.Model.ConceptContainer"/>.
            </summary>
            <param name="sourceIndex">The source index of the item to move</param>
            <param name="destinationIndex">The destination index of the item to move</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.CanAdd(Concept.Model.ConceptElement,System.String@)">
            <summary>
            Determines whether this instance can add the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="message">The message.</param>
            <returns><c>true</c> if this instance can add the specified item; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.CanAccept(Concept.Model.ConceptFactory)">
            <summary>
            Determines whether this instance can accept the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if this instance can accept the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.RetrieveFactories(Concept.Model.ConceptFactories)">
            <summary>
            Retrieves the factories needed to deserialized the ConceptElement.
            </summary>
            <param name="factories">The factories needed and used to desrialized the ConceptElement.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.IsFactoryValid(Concept.Model.ConceptFactory,System.Type)">
            <summary>
            Tests if a factory is valid for the current class, depending on the base type.
            This method can be overriden to dynamically change the validity of factories.
            </summary>
            <param name="factorie">The factory to test.</param>
            <param name="baseType">The base type.</param>
            <returns>
            A <see cref="!:System.Bool"/> that represents the validity of the factory.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.RetrieveProvidedFactories(Concept.Model.ConceptFactories,System.Predicate{Concept.Model.ConceptFactory})">
            <summary>
            Retrieves the factories of ProvidedComponent provided by the ConceptElement.
            </summary>
            <param name="factories">The factories provided by the ConceptElement.</param>
            <param name="filter">A predicate that operates on a ConceptFactory, that should return true to make its argument factory included into the factories.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.SetDefaultValues">
            <summary>
            Sets the default values to the properties of the <see cref="T:Concept.Model.ConceptElement"/>.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptContainer.WriteTo(Concept.Utils.IDataStoreNode)">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> to a node.
            </summary>
            <param name="node">The node where the data will be saved.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.WriteTo(Concept.Utils.IDataStoreNode,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> of a specific subject to a node.
            </summary>
            <param name="node">The node where the data will be saved.</param>
            <param name="subjects">The subject that will be saved.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.WritePropertiesOfSubject(Concept.Utils.IDataStoreNode,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes the properties of subject.
            </summary>
            <param name="node">The node.</param>
            <param name="subjects">The subjects.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.GetHashCode(System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Serves as a hash function for to detect changes of a ConceptElement.
            </summary>
            <param name="recursive">Define if the hash must look in the Items</param>
            <param name="subjects">The list of subjects to include in the hash</param>
            <returns>
            A <see cref="T:System.String"/> that represents the code.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Write(Concept.Utils.IDataStoreNode,Concept.Model.BaseConceptPropertyInfo)">
            <summary>
            Writes the specified node.
            </summary>
            <param name="node">The node.</param>
            <param name="property">The property.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector)">
            <summary>
            Load a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> from a node.
            </summary>
            <param name="node">The node containing the data of the ConceptElement.</param>
            <param name="factories">The list of factories to use for the desirialisation of the ConceptElement.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> from a node.
            </summary>
            <param name="node">The node containing the data of the ConceptElement.</param>
            <param name="factories">The list of factories to use for the desirialisation of the ConceptElement.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
            <param name="subjects">The subjects.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Read(Concept.Utils.IDataStoreNode,Concept.Utils.IMessageCollector,Concept.Model.BaseConceptPropertyInfo)">
            <summary>
            Reads the specified node.
            </summary>
            <param name="node">The node.</param>
            <param name="messageCollector">The message collector.</param>
            <param name="property">The property.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Write(Concept.Utils.IDataStoreNode,System.Reflection.PropertyInfo)">
            <summary>
            Writes the specified node.
            </summary>
            <remarks>Kept for Concept.Hmi 2012 Compatibility</remarks>
            <param name="node">The node.</param>
            <param name="property">The property.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Read(Concept.Utils.IDataStoreNode,Concept.Utils.IMessageCollector,System.Reflection.PropertyInfo)">
            <summary>
            Reads the specified node.
            </summary>
            /// <remarks>Kept for Concept.Hmi 2012 Compatibility</remarks>
            <param name="node">The node.</param>
            <param name="messageCollector">The message collector.</param>
            <param name="property">The property.</param>
        </member>
        <member name="F:Concept.Model.ConceptContainer._serializedProperties">
            <summary>
            The serialized properties
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptContainer.InitializeSubject(System.Boolean)">
            <summary>
            Initializes the subject.
            </summary>
            <param name="notify">if set to <c>true</c> [notify].</param>
        </member>
        <member name="F:Concept.Model.ConceptContainer._isDefaultSubjectLoaded">
            <summary>
            Get if the default subject is loaded.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.System#Collections#Generic#IEnumerable{Concept#Model#ConceptElement}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection of <see cref="T:Concept.Model.ConceptElement"/>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.DoCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Does the collection changed.
            </summary>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Concept.Model.ConceptContainer.Count">
            <summary>
            Gets the count of the internal list of <see cref="T:Concept.Model.ConceptElement"/>.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Concept.Model.ConceptContainer.Items">
            <summary>
            Gets the <see cref="T:Concept.Model.ConceptElement"/> that had been added to the internal list of the instance.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Concept.Model.ConceptContainer.AllNestedItems">
            <summary>
            Gets the <see cref="T:Concept.Model.ConceptElement"/> that had been added to the internal list, 
            recursively for each <see cref="T:Concept.Model.ConceptContainer"/>.
            </summary>
            <value>All nested items.</value>
        </member>
        <member name="E:Concept.Model.ConceptContainer.Filter">
            <summary>
            Occurs when a filter over the <see cref="T:Concept.Model.ConceptFactory"/> must be done.
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptContainer.PropertyInfos">
            <summary>
            Gets or sets the property infos.
            </summary>
            <value>The property infos.</value>
        </member>
        <member name="P:Concept.Model.ConceptContainer.Subjects">
            <summary>
            Gets the subjects.
            </summary>
            <value>The subjects.</value>
        </member>
        <member name="P:Concept.Model.ConceptContainer.IsDefaultSubjectNeeded">
            <summary>
            Gets or sets a value indicating whether this instance is default subject needed.
            </summary>
            <value><c>true</c> if this instance is default subject needed; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Concept.Model.ConceptContainer.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="T:Concept.Model.ConceptContainer.Indexer">
            <summary>
            Represents the indexer of the internal list of <see cref="T:Concept.Model.ConceptElement"/>.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Indexer.#ctor(Concept.Model.ConceptContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptContainer.Indexer"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Indexer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Concept.Model.ConceptContainer.Indexer.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Concept.Model.ConceptElement"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="F:Concept.Model.ConceptDynamicComponent.ComponentPropertyName">
            <summary>
            Constant string to manage <see cref="T:System.ComponentModel.Component"/> property changed.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptDynamicComponent.IsValid">
            <summary>
            Determines whether this instance is valid.
            </summary>
            <returns>
            	<c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptDynamicComponent.Add(Concept.Model.ConceptElement)">
            <summary>
            Adds the specified item to the internal list of the <see cref="T:Concept.Model.ConceptContainer"/>.
            </summary>
            <param name="item">The item to add</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Concept.Model.ConceptDynamicComponent.GetHashCode(System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Serves as a hash function for to detect changes of a ConceptElement.
            </summary>
            <param name="recursive">Define if the hash must look in the Items</param>
            <param name="subjects">The list of subjects to include in the hash</param>
            <returns>
            A <see cref="T:System.String"/> that represents the code.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptDynamicComponent.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptDynamicComponent.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Concept.Model.ConceptDynamicComponent.CanAccept(Concept.Model.ConceptFactory)">
            <summary>
            Determines whether this instance can accept the specified factory.
            </summary>
            <param name="factory">The factory.</param>
            <returns>
            	<c>true</c> if this instance can accept the specified factory; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptDynamicComponent.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector)">
            <summary>
            Load a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> from a node.
            </summary>
            <param name="node">The node containing the data of the ConceptElement.</param>
            <param name="factories">The list of factories to use for the desirialisation of the ConceptElement.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
        </member>
        <member name="M:Concept.Model.ConceptDynamicComponent.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> from a node.
            </summary>
            <param name="node">The node containing the data of the ConceptElement.</param>
            <param name="factories">The list of factories to use for the desirialisation of the ConceptElement.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
            <param name="subjects">The subjects.</param>
        </member>
        <member name="M:Concept.Model.ConceptDynamicComponent.WriteTo(Concept.Utils.IDataStoreNode)">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> to a node.
            </summary>
            <param name="node">The node where the data will be saved.</param>
        </member>
        <member name="M:Concept.Model.ConceptDynamicComponent.WriteTo(Concept.Utils.IDataStoreNode,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> of a specific subject to a node.
            </summary>
            <param name="node">The node where the data will be saved.</param>
            <param name="subjects">The subjects.</param>
        </member>
        <member name="P:Concept.Model.ConceptDynamicComponent.BaseComponent">
            <summary>
            Gets or sets the polymorphous component.
            </summary>
            <value>The component.</value>
        </member>
        <member name="P:Concept.Model.ConceptDynamicComponent.ItemType">
            <summary>
            Gets the type of the item.
            </summary>
            <value>The type of the item.</value>
        </member>
        <member name="P:Concept.Model.ConceptDynamicComponent.AcceptOnlyProvided">
            <summary>
            Gets or sets if the proposed items should only be of a provided type.
            </summary>
            <value>The type of the item.</value>
        </member>
        <member name="T:Concept.Model.ConceptDynamicComponent`1">
            <summary>
            Represents the base class for the component containing a polymorphous element. As a 
            <see cref="T:Concept.Model.ConceptElement"/>, this class has the mecanism allow serialization and
            deserialisation from/to a node or a file. When deserializing, the <see cref="T:Concept.Model.ConceptList"/>
            will create dynamically the instance of <see cref="T:Concept.Model.ConceptElement"/> using the <see cref="T:Concept.Model.ConceptFactory"/>
            described in the node/file.
            </summary>
            <typeparam name="T">The base class for the polymorphous element</typeparam>
        </member>
        <member name="M:Concept.Model.ConceptDynamicComponent`1.CanAdd(Concept.Model.ConceptElement,System.String@)">
            <summary>
            Determines whether this instance can add the specified element.
            </summary>
            <param name="element">The element.</param>
            <param name="message">The message.</param>
            <returns><c>true</c> if this instance can add the specified element; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Concept.Model.ConceptDynamicComponent`1.Component">
            <summary>
            Gets or sets the polymorphous component.
            </summary>
            <value>The component.</value>
        </member>
        <member name="P:Concept.Model.ConceptDynamicComponent`1.ItemType">
            <summary>
            Gets the type of the item.
            </summary>
            <value>The type of the item.</value>
        </member>
        <member name="M:Concept.Model.NotifierElement.DoPropertyChanged(System.String)">
            <summary>
            Does the property changed.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="E:Concept.Model.NotifierElement.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Concept.Model.ConceptElementDiagnostic">
            <summary>
            Reprensents the state of the <see cref="T:Concept.Model.ConceptElement">ConceptElement</see>.
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElementDiagnostic.Undefined">
            <summary>
            The undefined
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElementDiagnostic.Ok">
            <summary>
            The ok
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElementDiagnostic.Information">
            <summary>
            The information
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElementDiagnostic.Warning">
            <summary>
            The warning
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElementDiagnostic.Error">
            <summary>
            The error
            </summary>
        </member>
        <member name="T:Concept.Model.ConceptVisibleAttribute">
            <summary>
            ConceptVisibleAttribute is a class attribute which defines if the
            linked ConceptFactory is displayed when adding new object to a 
            ConceptDynamicList.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptVisibleAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptVisibleAttribute"/> class.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="P:Concept.Model.ConceptVisibleAttribute.IsVisible">
            <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
            <value><c>true</c> if this instance is visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Concept.Model.ConceptViewVisibleAttribute">
            <summary>
            ConceptVisibleInEditorAttribute is a class or field attribute which defines 
            if the matching element must be editable in the default view of Concept editor.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptViewVisibleAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptViewVisibleAttribute"/> class.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="P:Concept.Model.ConceptViewVisibleAttribute.IsVisible">
            <summary>
            Gets a value indicating whether this instance is visible.
            </summary>
            <value><c>true</c> if this instance is visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Concept.Model.BaseConceptNameAttribute">
            <summary>
            BaseConceptNameAttribute is a class attribute which defines
            the path of the ConceptElement. The path is used in categorized
            views.
            </summary>
        </member>
        <member name="P:Concept.Model.BaseConceptNameAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Concept.Model.ConceptNameAttribute">
            <summary>
            ConceptNameAttribute is the standard implementation of 
            BaseConceptCategoryAttribute
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptNameAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Concept.Model.ConceptNameAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Concept.Model.IntlConceptNameAttribute">
            <summary>
            IntlConceptNameAttribute is the Intl implementation of 
            BaseConeptCategoryAttribute
            </summary>
        </member>
        <member name="M:Concept.Model.IntlConceptNameAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.IntlConceptNameAttribute"/> class.
            </summary>
            <param name="intlId">The intl id.</param>
            <param name="defaultName">The default name.</param>
        </member>
        <member name="P:Concept.Model.IntlConceptNameAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Concept.Model.BaseConceptCategoryAttribute">
            <summary>
            BaseConceptCategoryAttribute is a class attribute which defines
            the path of the ConceptElement. The path is used in categorized
            views.
            </summary>
        </member>
        <member name="P:Concept.Model.BaseConceptCategoryAttribute.Category">
            <summary>
            Gets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="T:Concept.Model.ConceptCategoryAttribute">
            <summary>
            ConceptCategoryAttribute is the standard implementation of 
            BaseConceptCategoryAttribute
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptCategoryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptCategoryAttribute"/> class.
            </summary>
            <param name="category">The category.</param>
        </member>
        <member name="P:Concept.Model.ConceptCategoryAttribute.Category">
            <summary>
            Gets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="T:Concept.Model.IntlConceptCategoryAttribute">
            <summary>
            IntlConceptCategoryAttribute is the Intl implementation of 
            BaseConeptCategoryAttribute
            </summary>
        </member>
        <member name="M:Concept.Model.IntlConceptCategoryAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.IntlConceptCategoryAttribute"/> class.
            </summary>
            <param name="intlId">The intl id.</param>
            <param name="defaultCategory">The default category.</param>
        </member>
        <member name="P:Concept.Model.IntlConceptCategoryAttribute.Category">
            <summary>
            Gets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="T:Concept.Model.ConceptFactoryIdAttribute">
            <summary>
            ConceptFactoryIdAttribute allow to customize the name of the factory
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptFactoryIdAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptFactoryIdAttribute"/> class.
            </summary>
            <param name="factoryId">The factory id.</param>
        </member>
        <member name="P:Concept.Model.ConceptFactoryIdAttribute.FactoryId">
            <summary>
            Gets the factory id.
            </summary>
            <value>The factory id.</value>
        </member>
        <member name="T:Concept.Model.BaseConceptDetailsAttribute">
            <summary>
            BaseConceptDetailsAttribute is a class attribute which defines
            the details of the ConceptElement. 
            </summary>
        </member>
        <member name="P:Concept.Model.BaseConceptDetailsAttribute.Details">
            <summary>
            Gets the details.
            </summary>
            <value>The details.</value>
        </member>
        <member name="T:Concept.Model.ConceptDetailsAttribute">
            <summary>
            ConceptDetailsAttribute is the standard implementation of
            BaseConceptDetailsAttribute.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptDetailsAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptDetailsAttribute"/> class.
            </summary>
            <param name="details">The details.</param>
        </member>
        <member name="P:Concept.Model.ConceptDetailsAttribute.Details">
            <summary>
            Gets the details.
            </summary>
            <value>The details.</value>
        </member>
        <member name="T:Concept.Model.IntlConceptDetailsAttribute">
            <summary>
            IntlConceptDetailsAttribute is the Intl implementation of
            BaseConceptDetailsAttribute.
            </summary>
        </member>
        <member name="M:Concept.Model.IntlConceptDetailsAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.IntlConceptDetailsAttribute"/> class.
            </summary>
            <param name="intlId">The intl id.</param>
            <param name="intlDefaultText">The intl default text.</param>
        </member>
        <member name="P:Concept.Model.IntlConceptDetailsAttribute.Details">
            <summary>
            Gets the details.
            </summary>
            <value>The details.</value>
        </member>
        <member name="T:Concept.Model.ConceptSmallImageAttribute">
            <summary>
            ConceptSmallImageAttribute is a class attribute which 
            defines a small image for a ConceptElement.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptSmallImageAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptSmallImageAttribute"/> class.
            </summary>
            <param name="assemblyType">Type of the assembly.</param>
            <param name="resourceName">Name of the resource.</param>
        </member>
        <member name="T:Concept.Model.ConceptLargeImageAttribute">
            <summary>
            ConceptLargeImageAttribute is a class attribute which 
            defines a large image for a ConceptElement.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptLargeImageAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptLargeImageAttribute"/> class.
            </summary>
            <param name="assemblyType">Type of the assembly.</param>
            <param name="resourceName">Name of the resource.</param>
        </member>
        <member name="T:Concept.Model.ConceptRootAttribute">
            <summary>
            ConceptRootAttribute is a class attribute which defines
            if the class is a root. Only root can be instanciated
            in Concept Editor as top level ConceptElement.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptRootAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptRootAttribute"/> class.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="P:Concept.Model.ConceptRootAttribute.IsRoot">
            <summary>
            Gets or sets a value indicating whether this instance is root.
            </summary>
            <value><c>true</c> if this instance is root; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Concept.Model.ConceptSerializedAttribute">
            <summary>
            ConceptSerializedAttribute is a property attribute which involves
            that the property will automatically be serialized with the properties
            of the owner.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptSerializedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptSerializedAttribute"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptSerializedAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptSerializedAttribute"/> class.
            </summary>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:Concept.Model.ConceptSerializedAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptSerializedAttribute"/> class.
            </summary>
            <param name="index">The index.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="P:Concept.Model.ConceptSerializedAttribute.Index">
            <summary>
            Gets or sets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:Concept.Model.ConceptSerializedAttribute.Subject">
            <summary>
            Gets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="T:Concept.Model.ConceptAutoCreateAttribute">
            <summary>
            ConceptAutoCreate is a property attribute which allow
            to automatically create ConceptElement properties. The mecanism
            use the default factory to create the instance. As default, the 
            name will be the name of the property.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptAutoCreateAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptAutoCreateAttribute"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptAutoCreateAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptAutoCreateAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Concept.Model.ConceptAutoCreateAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Concept.Model.ConceptDefaultValueAttribute">
            <summary>
            ConceptDefaultValue is a property attribute which defines
            the default value of the property of the ConceptElement.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptDefaultValueAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptDefaultValueAttribute"/> class.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="P:Concept.Model.ConceptDefaultValueAttribute.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="M:Concept.Model.BaseConceptProvidedComponentAttribute.#ctor(System.Type,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptProvidedComponentAttribute"/> class.
            </summary>
            <param name="providedComponentType">Type of the provided component.</param>
            <param name="inherited">Define if sub class must provide the component.</param>
            <param name="name">Specifies the name of the factory and so the default name of new component using string.Format(). {0} = Provider name, {1} = Factory name
            </param>
        </member>
        <member name="M:Concept.Model.BaseConceptProvidedComponentAttribute.Factories(Concept.Model.ConceptElement)">
            <summary>
            Creates the factory.
            </summary>
            <param name="owner">The owner.</param>
            <returns>ConceptProvidedFactory.</returns>
        </member>
        <member name="P:Concept.Model.BaseConceptProvidedComponentAttribute.KeyDisplayFormat">
            <summary>
            Gets the intl key of the display format
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.BaseConceptProvidedComponentAttribute.DefaultDisplayFormat">
            <summary>
            Gets the intl default text of the display format.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.BaseConceptProvidedComponentAttribute.Inherited">
            <summary>
            Gets or sets if the sub classes must also provide the component.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Concept.Model.ConceptProvidedComponentAttribute">
            <summary>
            ConceptProvideAttribute is a class attribute which associates
            a ConceptProvidedComponent to a ConceptComponent.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptProvidedComponentAttribute.Factories(Concept.Model.ConceptElement)">
            <summary>
            Creates the factory.
            </summary>
            <param name="owner">The owner.</param>
            <returns>ConceptProvidedFactory.</returns>
        </member>
        <member name="T:Concept.Model.ConceptProvidedHierarchyAttribute">
            <summary>
            ConceptProvideHierarchy is a class attribute which allow to provide a hierarchy of component, meaning non abstract subclasses.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptProvidedHierarchyAttribute.Factories(Concept.Model.ConceptElement)">
            <summary>
            Creates the factory.
            </summary>
            <param name="owner">The owner.</param>
            <returns>ConceptProvidedFactory.</returns>
        </member>
        <member name="T:Concept.Model.ConceptViewAttribute">
            <summary>
            ConceptViewAttribute in a class attribute which associates Model/View, a specific
            subject could be specified.
            ModelPropertyName parameter is obsolete when using this attribute on a Property
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptViewAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptViewAttribute"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Concept.Model.ConceptViewAttribute.#ctor(System.Type,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptViewAttribute"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="viewPropertyName">Name of the view property.</param>
            <param name="modelPropertyName">Name of the model property.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="P:Concept.Model.ConceptViewAttribute.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewAttribute.ViewPropertyName">
            <summary>
            Gets the name of the view property.
            </summary>
            <value>The name of the view property.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewAttribute.ModelPropertyName">
            <summary>
            Gets the name of the model property.
            </summary>
            <value>The name of the model property.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewAttribute.Subject">
            <summary>
            Gets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="T:Concept.Model.ConceptViewPropertyAttribute">
            <summary>
            ConceptPropertyViewParameterAttribute in a property or class attribute 
            which set parameters to the view used in default concept editor
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptViewPropertyAttribute.#ctor(System.String,System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptViewPropertyAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyAttribute.ViewPropertyName">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyAttribute.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyAttribute.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyAttribute.IsValid">
            <summary>
            Gets or sets a value indicating whether this instance is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Concept.Model.ConceptViewPropertyIntlAttribute">
            <summary>
            ConceptViewPropertyIntlAttribute in a property or class attribute 
            which set parameters to the view used in default concept editor
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptViewPropertyIntlAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptViewPropertyIntlAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="intlKey">The intl key.</param>
            <param name="defaultValue">The default value.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyIntlAttribute.ViewPropertyName">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyIntlAttribute.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyIntlAttribute.IntlKey">
            <summary>
            Gets or sets the intl key.
            </summary>
            <value>The intl key.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyIntlAttribute.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyIntlAttribute.IsValid">
            <summary>
            Gets or sets a value indicating whether this instance is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Concept.Model.ConceptViewPropertyBindingAttribute">
            <summary>
            ConceptPropertyViewParameterAttribute in a property or class attribute 
            which set parameters to the view used in default concept editor
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptViewPropertyBindingAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptViewPropertyBindingAttribute"/> class.
            </summary>
            <param name="viewPropertyName">Name of the view property.</param>
            <param name="modelPropertyName">Name of the model property.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyBindingAttribute.ViewPropertyName">
            <summary>
            Gets the name of the view property.
            </summary>
            <value>The name of the view property.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyBindingAttribute.ModelPropertyName">
            <summary>
            Gets or sets the name of the model property.
            </summary>
            <value>The name of the model property.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyBindingAttribute.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyBindingAttribute.IsValid">
            <summary>
            Gets or sets a value indicating whether this instance is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Concept.Model.ConceptEditorAttribute">
            <summary>
            EditorAttribute is a class attribute which defines
            the default editor used when the EditProperties() method
            is called.
            </summary>
            <remarks>Kept for Concept.Hmi 2012 Compatibility</remarks>
        </member>
        <member name="M:Concept.Model.ConceptEditorAttribute.#ctor(System.Type,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptEditorAttribute"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="types">The types.</param>
        </member>
        <member name="P:Concept.Model.ConceptEditorAttribute.Types">
            <summary>
            Gets the types.
            </summary>
            <value>The types.</value>
        </member>
        <member name="T:Concept.Model.ConceptComponent">
            <summary>
            Represents the base class for all the element of the trade domain. It is use
            to reprensent a tool as well as an operation, a regulator and so else. It is
            a base class for all the plugin objects.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptComponent.WriteTo(Concept.Utils.IDataStoreNode)">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> to a node.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptComponent.WriteTo(Concept.Utils.IDataStoreNode,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> to a node.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptComponent.GetHashCode(System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Serves as a hash function for to detect changes of a ConceptElement.
            </summary>
            <param name="recursive">Define if the hash must look in the Items</param>
            <param name="subjects">The list of subjects to include in the hash</param>
            <returns>
            A <see cref="T:System.String"/> that represents the code.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptComponent.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector)">
            <summary>
            Load a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> from a node.
            </summary>
            <param name="node"> </param>
            <param name="factories">The list of factories to use for the desirialisation of the ConceptElement.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
        </member>
        <member name="M:Concept.Model.ConceptComponent.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> from a node.
            </summary>
            <param name="node">The node containing the data of the ConceptElement.</param>
            <param name="factories">The list of factories to use for the desirialisation of the ConceptElement.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
            <param name="subjects">The subjects.</param>
        </member>
        <member name="M:Concept.Model.ConceptComponent.SetDefaultValues">
            <summary>
            Sets the default values for all the properties in the <see cref="T:Concept.Model.ConceptComponent"/>.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptComponent.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptComponent.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Concept.Model.ConceptComponent.None">
            <summary>
            Gets the None <see cref="T:Concept.Model.ConceptComponent"/>.
            </summary>
            <value>The None <see cref="T:Concept.Model.ConceptComponent"/>.</value>
        </member>
        <member name="T:Concept.Model.BaseConceptPropertyInfo">
            <summary>
            Class BaseConceptPropertyInfo
            </summary>
        </member>
        <member name="M:Concept.Model.BaseConceptPropertyInfo.SetDefaultValue(System.Object)">
            <summary>
            Sets the default value.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:Concept.Model.BaseConceptPropertyInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Concept.Model.BaseConceptPropertyInfo.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="P:Concept.Model.BaseConceptPropertyInfo.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Concept.Model.BaseConceptPropertyInfo.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Concept.Model.BaseConceptPropertyInfo.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Concept.Model.BaseConceptPropertyInfo.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Concept.Model.BaseConceptPropertyInfo.HasDefaultValue">
            <summary>
            Define if a specific default value has been coded by the developer
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Concept.Model.BaseConceptPropertyInfo.Subjects">
            <summary>
            Gets the subjects.
            </summary>
            <value>The subjects.</value>
        </member>
        <member name="P:Concept.Model.BaseConceptPropertyInfo.IsViewVisible">
            <summary>
            Gets a value indicating whether this instance is view visible.
            </summary>
            <value><c>true</c> if this instance is view visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Concept.Model.BaseConceptPropertyValueInfo">
            <summary>
            Class BaseConceptPropertyValueInfo
            </summary>
        </member>
        <member name="P:Concept.Model.BaseConceptPropertyValueInfo.IsSerialized">
            <summary>
            Gets a value indicating whether this instance is serialized.
            </summary>
            <value><c>true</c> if this instance is serialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.BaseConceptPropertyValueInfo.SerializedIndex">
            <summary>
            Gets the index of the serialized.
            </summary>
            <value>The index of the serialized.</value>
        </member>
        <member name="T:Concept.Model.BaseConceptPropertyObjectInfo">
            <summary>
            Class BaseConceptPropertyObjectInfo
            </summary>
        </member>
        <member name="P:Concept.Model.BaseConceptPropertyObjectInfo.IsAutoCreated">
            <summary>
            Gets a value indicating whether this instance is auto created.
            </summary>
            <value><c>true</c> if this instance is auto created; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.BaseConceptPropertyObjectInfo.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Concept.Model.BaseConceptPropertyObjectInfo.HasDefaultValue">
            <summary>
            Define if a specific default value has been coded by the developer
            </summary>
            <value>The default value.</value>
        </member>
        <member name="T:Concept.Model.ConceptPropertyObjectInfo">
            <summary>
            Class ConceptPropertyObjectInfo
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptPropertyObjectInfo.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptPropertyObjectInfo"/> class.
            </summary>
            <param name="info">The info.</param>
        </member>
        <member name="M:Concept.Model.ConceptPropertyObjectInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Concept.Model.ConceptPropertyObjectInfo.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="F:Concept.Model.ConceptPropertyObjectInfo._subjects">
            <summary>
            The _subjects
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptPropertyObjectInfo.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyObjectInfo.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyObjectInfo.IsAutoCreated">
            <summary>
            Gets a value indicating whether this instance is auto created.
            </summary>
            <value><c>true</c> if this instance is auto created; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyObjectInfo.Subjects">
            <summary>
            Gets the subjects.
            </summary>
            <value>The subjects.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyObjectInfo.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyObjectInfo.IsViewVisible">
            <summary>
            Gets a value indicating whether this instance is view visible.
            </summary>
            <value><c>true</c> if this instance is view visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyObjectInfo.Info">
            <summary>
            Gets or sets the info.
            </summary>
            <value>The info.</value>
        </member>
        <member name="T:Concept.Model.ConceptPropertyValueInfo">
            <summary>
            Class ConceptPropertyValueInfo
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptPropertyValueInfo.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptPropertyValueInfo"/> class.
            </summary>
            <param name="info">The info.</param>
        </member>
        <member name="M:Concept.Model.ConceptPropertyValueInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Concept.Model.ConceptPropertyValueInfo.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="F:Concept.Model.ConceptPropertyValueInfo._type">
            <summary>
            The _type
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptPropertyValueInfo._isSerialized">
            <summary>
            The _is serialized
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptPropertyValueInfo._index">
            <summary>
            The _index
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptPropertyValueInfo._defaultValue">
            <summary>
            The _default value
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptPropertyValueInfo._displayName">
            <summary>
            The _display name
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptPropertyValueInfo._name">
            <summary>
            The _name
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptPropertyValueInfo._subjects">
            <summary>
            The _subjects
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptPropertyValueInfo._isViewVisible">
            <summary>
            The _is view visible
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptPropertyValueInfo.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyValueInfo.IsSerialized">
            <summary>
            Gets a value indicating whether this instance is serialized.
            </summary>
            <value><c>true</c> if this instance is serialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyValueInfo.SerializedIndex">
            <summary>
            Gets the index of the serialized.
            </summary>
            <value>The index of the serialized.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyValueInfo.Subjects">
            <summary>
            Gets the subjects.
            </summary>
            <value>The subjects.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyValueInfo.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyValueInfo.HasDefaultValue">
            <summary>
            Define if a specific default value has been coded by the developer
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyValueInfo.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyValueInfo.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyValueInfo.IsViewVisible">
            <summary>
            Gets a value indicating whether this instance is view visible.
            </summary>
            <value><c>true</c> if this instance is view visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyValueInfo.Info">
            <summary>
            Gets or sets the info.
            </summary>
            <value>The info.</value>
        </member>
        <member name="T:Concept.Model.SubjectedConceptProperties">
            <summary>
            Class SubjectedConceptProperties
            </summary>
        </member>
        <member name="T:Concept.Model.SubjectedConceptElements">
            <summary>
            Class SubjectedConceptElements
            </summary>
        </member>
        <member name="T:Concept.Model.ConceptFactory">
            <summary>
            Class ConceptFactory
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptFactory.FactoryId(System.Type)">
            <summary>
            Factories the id.
            </summary>
            <param name="type">The type.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Concept.Model.ConceptFactory.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptFactory"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Concept.Model.ConceptFactory.CreateObject">
            <summary>
            Creates the object.
            </summary>
            <returns>ConceptElement.</returns>
            <exception cref="T:Concept.Utils.ConceptException">1000</exception>
        </member>
        <member name="P:Concept.Model.ConceptFactory.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Concept.Model.ConceptFactory.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Concept.Model.ConceptFactory.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Concept.Model.ConceptFactory.Details">
            <summary>
            Gets the details.
            </summary>
            <value>The details.</value>
        </member>
        <member name="P:Concept.Model.ConceptFactory.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="T:Concept.Model.ConceptProvidedFactory">
            <summary>
            Class ConceptProvidedFactory
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptProvidedFactory.#ctor(System.Type,Concept.Model.ConceptElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptProvidedFactory"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Concept.Model.ConceptProvidedFactory.SetDisplayNameFormat(System.String,System.String)">
            <summary>
            Set the format of the intl display name
            </summary>
            <param name="key">The key of the intl.</param>
            <param name="defaultFormat">The default text of the intl.</param>
        </member>
        <member name="M:Concept.Model.ConceptProvidedFactory.SetDisplayNameFormat(System.String)">
            <summary>
            Set the format of the display name
            </summary>
            <param name="format">The format of the display name.</param>
        </member>
        <member name="M:Concept.Model.ConceptProvidedFactory.SetDisplayNameFormat(Concept.Utils.IntlText)">
            <summary>
            Set the format of the intl display name
            </summary>
            <param name="text">The intl text to use as format.</param>
        </member>
        <member name="P:Concept.Model.ConceptProvidedFactory.Provider">
            <summary>
            Gets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:Concept.Model.ConceptProvidedFactory.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Concept.Model.ConceptProvidedFactory.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="T:Concept.Model.ConceptFactories">
            <summary>
            Class ConceptFactories
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptFactories.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptFactories"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptFactories.RegisterFactory(Concept.Model.ConceptFactory)">
            <summary>
            Registers the factory.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:Concept.Model.ConceptFactories.RegisterFactories(Concept.Model.ConceptFactories)">
            <summary>
            Registers the factories.
            </summary>
            <param name="factories">The factories.</param>
        </member>
        <member name="M:Concept.Model.ConceptFactories.Find(System.String)">
            <summary>
            Finds the specified factory id.
            </summary>
            <param name="factoryId">The factory id.</param>
            <returns>ConceptFactory.</returns>
        </member>
        <member name="M:Concept.Model.ConceptFactories.CreateObject(System.String)">
            <summary>
            Creates the object.
            </summary>
            <param name="factoryId">The factory id.</param>
            <returns>ConceptElement.</returns>
        </member>
        <member name="P:Concept.Model.ConceptFactories.First">
            <summary>
            Gets the first.
            </summary>
            <value>The first.</value>
        </member>
        <member name="P:Concept.Model.ConceptFactories.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Concept.Model.ConceptDynamicList">
            <summary>
            Represents the base class for the list containing polymorphous element.. As a 
            <see cref="T:Concept.Model.ConceptElement"/>, this class has the mecanism allow serialization and
            deserialisation from/to a node or a file. When deserializing, the <see cref="T:Concept.Model.ConceptList"/>
            will create dynamically instances of <see cref="T:Concept.Model.ConceptElement"/> using the <see cref="T:Concept.Model.ConceptFactory"/>
            described in the node/file.
            </summary>
        </member>
        <member name="T:Concept.Model.ConceptList">
            <summary>
            Represents the base class for all the list provided by Concept framework. As a 
            <see cref="T:Concept.Model.ConceptElement"/>, this class has the mecanism allow serialization and
            deserialisation from/to a node or a file. When deserializing, the <see cref="T:Concept.Model.ConceptList"/>
            will create dynamically instances of <see cref="T:Concept.Model.ConceptElement"/> using the <see cref="T:Concept.Model.ConceptFactory"/>
            described in the node/file.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptList.WriteTo(Concept.Utils.IDataStoreNode)">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> to a node.
            </summary>
            <param name="node">The node where the data will be saved.</param>
        </member>
        <member name="M:Concept.Model.ConceptList.WriteTo(Concept.Utils.IDataStoreNode,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> of a specific subject to a node.
            </summary>
            <param name="node">The node where the data will be saved.</param>
            <param name="subjects">The subjects.</param>
        </member>
        <member name="M:Concept.Model.ConceptList.WriteTo(Concept.Utils.IDataStoreNode,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes to.
            </summary>
            <param name="node">The node.</param>
            <param name="useSubject">if set to <c>true</c> [use subject].</param>
            <param name="subjects">The subjects.</param>
        </member>
        <member name="M:Concept.Model.ConceptList.WriteSpecificData(Concept.Utils.IDataStoreNode,Concept.Model.ConceptElement)">
            <summary>
            Writes the specific data.
            </summary>
            <param name="node">The node.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Concept.Model.ConceptList.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector)">
            <summary>
            Load a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> from a node.
            </summary>
            <param name="node">The node containing the data of the ConceptElement.</param>
            <param name="factories">The list of factories to use for the desirialisation of the ConceptElement.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
        </member>
        <member name="M:Concept.Model.ConceptList.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> from a node.
            </summary>
            <param name="node">The node containing the data of the ConceptElement.</param>
            <param name="factories">The list of factories to use for the desirialisation of the ConceptElement.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
            <param name="subjects">The subjects.</param>
        </member>
        <member name="M:Concept.Model.ConceptList.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reads from.
            </summary>
            <param name="node">The node.</param>
            <param name="factories">The factories.</param>
            <param name="messageCollector">The message collector.</param>
            <param name="useSubject">if set to <c>true</c> [use subject].</param>
            <param name="subjects">The subjects.</param>
        </member>
        <member name="M:Concept.Model.ConceptList.CreateObject(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Int32)">
            <summary>
            Creates the object.
            </summary>
            <param name="node">The node.</param>
            <param name="factories">The factories.</param>
            <param name="messageCollector">The message collector.</param>
            <param name="index">The index.</param>
            <returns>ConceptElement.</returns>
        </member>
        <member name="M:Concept.Model.ConceptList.CanAccept(Concept.Model.ConceptFactory)">
            <summary>
            Determines whether this instance can accept the specified factory.
            </summary>
            <param name="factory">The factory.</param>
            <returns>
            	<c>true</c> if this instance can accept the specified factory; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptList.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptList.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Concept.Model.ConceptList.GetHashCode(System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Serves as a hash function for to detect changes of a ConceptElement.
            </summary>
            <param name="recursive">Define if the hash must look in the Items</param>
            <param name="subjects">The list of subjects to include in the hash</param>
            <returns>
            A <see cref="T:System.String"/> that represents the code.
            </returns>
        </member>
        <member name="P:Concept.Model.ConceptList.ItemType">
            <summary>
            Gets the type of the item contained in the internal list.
            </summary>
            <value>The type of the item.</value>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList.WriteSpecificData(Concept.Utils.IDataStoreNode,Concept.Model.ConceptElement)">
            <summary>
            Writes the specific data.
            </summary>
            <param name="node">The node.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList.CreateObject(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Int32)">
            <summary>
            Creates the object.
            </summary>
            <param name="node">The node.</param>
            <param name="factories">The factories.</param>
            <param name="messageCollector">The message collector.</param>
            <param name="index">The index.</param>
            <returns>ConceptElement.</returns>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList.CreateElement(Concept.Model.ConceptFactory)">
            <summary>
            Creates an instance of a <see cref="T:Concept.Model.ConceptElement"/> with the specified factory. The
            name of the new item will be autogenerated to be unique in the internal list.
            </summary>
            <param name="factory">The factory used to create the instance</param>
            <returns></returns>
        </member>
        <member name="P:Concept.Model.ConceptDynamicList.ItemType">
            <summary>
            Gets the type of the item contained in the internal list.
            </summary>
            <value>The type of the item.</value>
        </member>
        <member name="P:Concept.Model.ConceptDynamicList.AutoSelectIfUniqueFactory">
            <summary>
            Gets or sets if the add command will select automatically the factory when only one is available.
            </summary>
            <value>Auto selection of unique factory.</value>
        </member>
        <member name="T:Concept.Model.ConceptDynamicList`1">
            <summary>
            Represents the generic class for the list containing polymorphous element. As a 
            <see cref="T:Concept.Model.ConceptElement"/>, this class has the mecanism allow serialization and
            deserialisation from/to a node or a file. When deserializing, the <see cref="T:Concept.Model.ConceptList"/>
            will create dynamically instances of <see cref="T:Concept.Model.ConceptElement"/> using the <see cref="T:Concept.Model.ConceptFactory"/>
            described in the node/file.
            </summary>
            <typeparam name="T">The base class for the polymorphous elements</typeparam>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptDynamicList`1"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList`1.CanAdd(Concept.Model.ConceptElement,System.String@)">
            <summary>
            Determines whether this instance can add the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="message">The message.</param>
            <returns>
            	<c>true</c> if this instance can add the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the System.Collections.Generic.IList{T}.
            </summary>
            <param name="item">The object to locate in the System.Collections.Generic.IList{T}.</param>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList`1.Insert(System.Int32,`0)">
             <summary>
             Inserts an item to the System.Collections.Generic.IList{T} at the specified index.
             </summary>
             <param name="index">The zero-based index at which item should be inserted.</param>
             <param name="item">The object to insert into the System.Collections.Generic.IList{T}.</param>
             <exception>
             System.ArgumentOutOfRangeException:
                 index is not a valid index in the System.Collections.Generic.IList{T}.
            
               System.NotSupportedException:
                 The System.Collections.Generic.IList{T} is read-only.
            </exception>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList`1.Add(`0)">
            <summary>
            Adds an item to the System.Collections.Generic.ICollection{T}.
            </summary>
            <param name="item">The object to add to the System.Collections.Generic.ICollection{T}.</param>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList`1.Contains(`0)">
            <summary>
             Determines whether the System.Collections.Generic.ICollection{T} contains
             a specific value.
            </summary>
            <param name="item">The object to locate in the System.Collections.Generic.ICollection{T}.</param>
            <returns>
            	<c>true</c> if item is found in the System.Collections.Generic.ICollection{T}; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the System.Collections.Generic.ICollection{T} to an
            System.Array, starting at a particular System.Array index.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements
            copied from System.Collections.Generic.ICollection{T}. The System.Array must
            have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the System.Collections.Generic.ICollection{T}.
            </summary>
            <param name="item">The object to remove from the System.Collections.Generic.ICollection{T}.</param>
            <returns> true if item was successfully removed from the System.Collections.Generic.ICollection{T};
                otherwise, false. This method also returns false if item is not found in
                the original System.Collections.Generic.ICollection{T}.</returns>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A System.Collections.Generic.IEnumerator{T} that can be used to iterate through
            the collection.</returns>
        </member>
        <member name="P:Concept.Model.ConceptDynamicList`1.Items">
            <summary>
            Gets the <see cref="T:Concept.Model.ConceptElement"/> that had been added to the internal list of the instance.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Concept.Model.ConceptDynamicList`1.ItemType">
            <summary>
            Gets the type of the item contained in the internal list.
            </summary>
            <value>The type of the item.</value>
        </member>
        <member name="P:Concept.Model.ConceptDynamicList`1.AcceptOnlyProvided">
            <summary>
            Gets or sets if the proposed items should only be of a provided type.
            </summary>
            <value>The type of the item.</value>
        </member>
        <member name="P:Concept.Model.ConceptDynamicList`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Concept.Model.ConceptElement"/> at the specified index.
            </summary>
            <value>The element at the specified index.</value>
        </member>
        <member name="P:Concept.Model.ConceptDynamicList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Concept.Model.ConceptDynamicList`1.Indexer`1">
            <summary>
            Represents the indexer of the internal list.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList`1.Indexer`1.#ctor(Concept.Model.ConceptDynamicList{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptDynamicList`1"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="P:Concept.Model.ConceptDynamicList`1.Indexer`1.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>System.Object</returns>
        </member>
        <member name="T:Concept.Model.IChildrenView">
            <summary>
            Interface IChildrenView
            </summary>
            <remarks>
            The class that implements IChildrenView must manage the changed of the Children by itself,
            by calling DoPropertyChanged(ConceptModelUtils.ChildrenPropertyName);
            </remarks>
        </member>
        <member name="P:Concept.Model.IChildrenView.Children">
            <summary>
            Gets the children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="T:Concept.Model.ConceptField">
            <summary>
            Class ConceptField
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptField"/> class.
            </summary>
        </member>
        <member name="T:Concept.Model.BinaryData">
            <summary>
            Class BinaryData
            </summary>
        </member>
        <member name="T:Concept.Model.PngData">
            <summary>
            Class PngData
            </summary>
            <remarks>
              <see cref="T:Concept.Model.BinaryToStringConverter`1">Converter</see> must be in the view, because of the dependance with the UI Technology
            </remarks>
        </member>
        <member name="T:Concept.Model.BinaryToStringConverter`1">
            <summary>
            Class BinaryToStringConverter
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Concept.Model.BinaryToStringConverter`1.ConvertTo(System.Object)">
            <summary>
            Converts to.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Concept.Model.BinaryToStringConverter`1.ConvertFrom(System.String)">
            <summary>
            Converts from.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="P:Concept.Model.BinaryToStringConverter`1.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Concept.Model.ConceptModelUtils">
            <summary>
            Class ConceptModelUtils
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptModelUtils.IntlFolder">
            <summary>
            The intl defautl folder
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptModelUtils.ChildrenPropertyName">
            <summary>
            Constant string to manage Children property changed.
            </summary>
            <seealso cref="T:Concept.Model.IChildrenView"/>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.FactoriesOf(Concept.Model.ConceptContainer,Concept.Model.ConceptFactories,System.Type)">
            <summary>
            Factorieses the of.
            </summary>
            <param name="container">The container.</param>
            <param name="source">The source.</param>
            <param name="type">The type.</param>
            <returns>ConceptFactories.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.FactoriesOf(Concept.Model.ConceptFactories,System.Type)">
            <summary>
            Factorieses the of.
            </summary>
            <param name="source">The source.</param>
            <param name="type">The type.</param>
            <returns>ConceptFactories.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.FactoriesOf(System.Collections.Generic.IEnumerable{System.Type},System.Type)">
            <summary>
            Factorieses the of.
            </summary>
            <param name="source">The source.</param>
            <param name="type">The type.</param>
            <returns>ConceptFactories.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeFactoryId(System.Type)">
            <summary>
            Gets the attribute factory id.
            </summary>
            <param name="type">The type.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeVisible(System.Type)">
            <summary>
            Gets the attribute visible.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if type has <see cref="T:Concept.Model.ConceptVisibleAttribute">Visible</see> attribute<c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeVisible(System.Reflection.PropertyInfo)">
            <summary>
            Gets the attribute visible.
            </summary>
            <param name="propertyInfo">The property info.</param>
            <returns><c>true</c> if propertyInfo has <see cref="T:Concept.Model.ConceptVisibleAttribute">Visible</see> attribute<c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeViewVisible(System.Type)">
            <summary>
            Gets the attribute view visible.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if type has <see cref="T:Concept.Model.ConceptViewVisibleAttribute">ViewVisible</see> attribute, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeViewVisible(System.Reflection.PropertyInfo)">
            <summary>
            Gets the attribute view visible.
            </summary>
            <param name="property">The property.</param>
            <returns><c>true</c> if property has <see cref="T:Concept.Model.ConceptViewVisibleAttribute">ViewVisible</see> attribute, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeName(System.Type)">
            <summary>
            Gets the name of the attribute.
            </summary>
            <param name="type">The type.</param>
            <returns>IntlText.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeName(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Gets the name of the attribute.
            </summary>
            <param name="info">The info.</param>
            <param name="defaultName">The default name.</param>
            <returns>IntlText.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeCategory(System.Object)">
            <summary>
            Gets the attribute category.
            </summary>
            <param name="element">The element.</param>
            <returns>IntlText.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeCategory(System.Type)">
            <summary>
            Gets the attribute category.
            </summary>
            <param name="type">The type.</param>
            <returns>IntlText.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeDetails(System.Type)">
            <summary>
            Gets the attribute details.
            </summary>
            <param name="type">The type.</param>
            <returns>IntlText.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeView(System.Type)">
            <summary>
            Gets the attribute view.
            </summary>
            <param name="type">The type.</param>
            <returns>IEnumerable{Type}.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeRoot(System.Type)">
            <summary>
            Gets the attribute root.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if type has <see cref="T:Concept.Model.ConceptRootAttribute">ConceptRoot</see> attribute, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeIsSerialized(System.Reflection.PropertyInfo,System.Int32@)">
            <summary>
            Gets the attribute is serialized.
            </summary>
            <param name="property">The property.</param>
            <param name="index">The index.</param>
            <returns><c>true</c> if property has <see cref="T:Concept.Model.ConceptSerializedAttribute">ConceptSerialized</see> attribute, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeSubjects(System.Reflection.PropertyInfo)">
            <summary>
            Gets the attribute subjects.
            </summary>
            <param name="property">The property.</param>
            <returns>IEnumerable{System.String}.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeIsAutoCreate(System.Reflection.PropertyInfo,System.String@)">
            <summary>
            Gets the attribute is auto create.
            </summary>
            <param name="property">The property.</param>
            <param name="name">The name.</param>
            <returns><c>true</c> if property has <see cref="T:Concept.Model.ConceptSerializedAttribute">ConceptAutoCreate</see> attribute, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeEditor(System.Type)">
            <summary>
            Gets the attribute editor.
            </summary>
            <param name="type">The type.</param>
            <returns>IEnumerable{Type}.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.HasFlagSet(Concept.Model.ConceptOptions,Concept.Model.ConceptOptions)">
            <summary>
            Determines whether [has flag set] [the specified options].
            </summary>
            <param name="options">The options.</param>
            <param name="flags">The flags.</param>
            <returns><c>true</c> if [has flag set] [the specified options]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetDefaultValueOf(System.Reflection.PropertyInfo)">
            <summary>
            Gets the default value of.
            </summary>
            <param name="property">The property.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.IsNameValid(System.String,Concept.Model.ConceptElement,System.String@)">
            <summary>
            Determines whether [is name valid] [the specified name].
            </summary>
            <param name="name">The name.</param>
            <param name="element">The element.</param>
            <param name="causes">The causes.</param>
            <returns><c>true</c> if [is name valid] [the specified name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.IsAncestorOf(Concept.Model.ConceptContainer,Concept.Model.ConceptElement)">
            <summary>
            Determines whether [is ancestor of] [the specified ancestor container].
            </summary>
            <param name="ancestorContainer">The ancestor container.</param>
            <param name="conceptElement">The concept element.</param>
            <returns><c>true</c> if [is ancestor of] [the specified ancestor container]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.FindContainerOfType``1(Concept.Model.ConceptElement,System.Int32)">
            <summary>
            Finds the type of the container of.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element">The element.</param>
            <param name="level">The level.</param>
            <returns><see cref="T:Concept.Model.ConceptElement"/></returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.FindContainerOfSpecialType``1(Concept.Model.ConceptElement,System.Int32)">
            <summary>
            Finds the type of the container of.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element">The element.</param>
            <param name="level">The level.</param>
            <returns><see cref="T:Concept.Model.ConceptElement"/></returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.IsTypeValid(System.Type,System.Type,System.Boolean)">
            <summary>
            Determines whether [is type valid] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <param name="baseType">Type of the base.</param>
            <returns><c>true</c> if [is type valid] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.HasSubject(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether the specified subjects has subject.
            </summary>
            <param name="subjects">The subjects.</param>
            <returns><c>true</c> if the specified subjects has subject; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.HasDefaultSubject(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether [has default subject] [the specified subjects].
            </summary>
            <param name="subjects">The subjects.</param>
            <returns><c>true</c> if [has default subject] [the specified subjects]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.HasSubject(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Determines whether the specified subjects has subject.
            </summary>
            <param name="subjects">The subjects.</param>
            <param name="subject">The subject.</param>
            <returns><c>true</c> if the specified subjects has subject; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.HasDefaultSubject(Concept.Model.ConceptElement)">
            <summary>
            Determines whether [has default subject] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if [has default subject] [the specified item]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.HasOneOfSubjects(Concept.Model.ConceptElement,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether [has one of subjects] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <param name="subjects">The subjects.</param>
            <returns><c>true</c> if [has one of subjects] [the specified item]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.CreateObjectFromNode(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,Concept.Model.ConceptContainer,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates and load a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> from a node.
            </summary>
            <param name="node">The node containing the factory to use and the data of the ConceptElement.</param>
            <param name="factories">The list of factories to use for the desirialisation of the ConceptElement.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
            <param name="container">The container.</param>
            <param name="subjects">The subjects.</param>
            <returns>ConceptElement.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.ReadElementFromNode(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,Concept.Model.ConceptContainer,System.Collections.Generic.IEnumerable{System.String},Concept.Model.ConceptElement,System.String)">
            <summary>
            Reads the element from node.
            </summary>
            <param name="node">The node.</param>
            <param name="factories">The factories.</param>
            <param name="messageCollector">The message collector.</param>
            <param name="container">The container.</param>
            <param name="subjects">The subjects.</param>
            <param name="item">The item.</param>
            <param name="factoryName">Name of the factory.</param>
            <returns>ConceptElement.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.SaveObjectToNode(Concept.Model.ConceptElement,Concept.Utils.IDataStoreNode,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> to a node.
            </summary>
            <param name="element">The ConceptElement to serialize</param>
            <param name="node">The node where the factory and the data will be saved.</param>
            <param name="subjects">The subjects.</param>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.LoadStoreFromFile(Concept.Utils.XmlDataStore,System.String,Concept.Utils.IMessageCollector)">
            <summary>
            Loads the store from file.
            </summary>
            <param name="store">The store.</param>
            <param name="fileName">Name of the file.</param>
            <param name="messageCollector">The message collector.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.CreateObjectFromFile(System.String,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates and load a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> from a node.
            </summary>
            <param name="filename">The filename containing the factory tu use and the data of the ConceptElement.</param>
            <param name="factories">The list of factories to use for the desirialisation of the ConceptElement.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
            <param name="subjects">The subjects.</param>
            <returns>ConceptElement.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.SaveObjectToFile(Concept.Model.ConceptElement,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> to a node.
            </summary>
            <param name="element">The ConceptElement to serialize</param>
            <param name="filename">The filename.</param>
            <param name="subjects">The subjects.</param>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.LoadDictionary(System.Reflection.Assembly)">
            <summary>
            Loads the dictionary.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.AllConceptFactories(Concept.Model.ConceptElement)">
            <summary>
            Alls the concept factories.
            </summary>
            <param name="element">The element.</param>
            <returns>ConceptFactories.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.AllConceptFactories(Concept.Model.ConceptElement,System.Type)">
            <summary>
            Alls the concept factories.
            </summary>
            <param name="element">The element.</param>
            <param name="type">The type.</param>
            <returns>ConceptFactories.</returns>
        </member>
        <member name="T:Concept.Model.ConceptOptions">
            <summary>
            Enum ConceptOptions
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptOptions.NotSerialized">
            <summary>
            Option that disable serialization
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptOptions.NotSpecificNodeNeeded">
            <summary>
            Option that disable the mandatory node
            </summary>
        </member>
        <member name="T:Concept.Model.ConceptStaticList">
            <summary>
            Class ConceptStaticList
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptStaticList.AddNewElement">
            <summary>
            Adds the new element.
            </summary>
            <returns>ConceptElement.</returns>
        </member>
        <member name="M:Concept.Model.ConceptStaticList.AddNewElement(System.String)">
            <summary>
            Adds the new element.
            </summary>
            <param name="name">The name.</param>
            <returns>ConceptElement.</returns>
        </member>
        <member name="P:Concept.Model.ConceptStaticList.ElementFactory">
            <summary>
            Gets or sets the concept factory.
            </summary>
            <value>The concept factory.</value>
        </member>
        <member name="T:Concept.Model.ConceptStaticList`1">
            <summary>
            Class ConceptStaticList
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptStaticList`1"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.CreateObject(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Int32)">
            <summary>
            Creates the object.
            </summary>
            <param name="node">The node.</param>
            <param name="factories">The factories.</param>
            <param name="messageCollector">The message collector.</param>
            <param name="index">The index.</param>
            <returns>ConceptElement.</returns>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.AddNewElement">
            <summary>
            Adds the new element.
            </summary>
            <returns>ConceptElement.</returns>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.AddNewElement(System.String)">
            <summary>
            Adds the new element.
            </summary>
            <param name="name">The name.</param>
            <returns>ConceptElement.</returns>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.IndexOf(`0)">
            <summary>
            Indexes the of.
            </summary>
            <param name="item">The item.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.Contains(`0)">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>IEnumerator{`0}.</returns>
        </member>
        <member name="P:Concept.Model.ConceptStaticList`1.Items">
            <summary>
            Gets the <see cref="T:Concept.Model.ConceptElement"/> that had been added to the internal list of the instance.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Concept.Model.ConceptStaticList`1.ElementFactory">
            <summary>
            Gets or sets the concept factory.
            </summary>
            <value>The concept factory.</value>
        </member>
        <member name="P:Concept.Model.ConceptStaticList`1.ItemType">
            <summary>
            Gets the type of the item contained in the internal list.
            </summary>
            <value>The type of the item.</value>
        </member>
        <member name="P:Concept.Model.ConceptStaticList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>`0.</returns>
        </member>
        <member name="P:Concept.Model.ConceptStaticList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
            <returns>true if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:Concept.Model.ConceptStaticList`1.Indexer`1">
            <summary>
            Class Indexer
            </summary>
            <typeparam name="U"></typeparam>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.Indexer`1.#ctor(Concept.Model.ConceptStaticList{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="P:Concept.Model.ConceptStaticList`1.Indexer`1.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>System.Object</returns>
        </member>
        <member name="T:Concept.Model.PluginClassManager">
            <summary>
            Summary description for PluginClassManager.
            </summary>
            
        </member>
        <member name="F:Concept.Model.PluginClassManager.EntryPluginFiles">
            <summary>
            The Puo Entry for the plugins files
            </summary>
        </member>
        <member name="M:Concept.Model.PluginClassManager.GetConflictingAssemblies">
            <summary>
            Check the current Application domain if there are assemblies loaded multiple times. 
            </summary>
            <returns>Dictionary which contains as key the assembly name which is loaded multiple times and as key
            as string list with the locations from where it was loaded.When no conflict has
            been determined an emtpy list is returned.</returns>
        </member>
        <member name="M:Concept.Model.PluginClassManager.LoadAssembly(System.String,Concept.Utils.IMessageCollector)">
            <summary>
            Loads the assembly.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="messageCollector">The message collector.</param>
        </member>
        <member name="M:Concept.Model.PluginClassManager.LoadAssemblies(System.String[],Concept.Utils.IMessageCollector)">
            <summary>
            Loads the assemblies.
            </summary>
            <param name="filePaths">The file paths.</param>
            <param name="messageCollector">The message collector.</param>
        </member>
        <member name="M:Concept.Model.PluginClassManager.GetDiagnosticFor(System.String)">
            <summary>
            Gets the diagnostic for.
            </summary>
            <param name="filePaht">The file paht.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Concept.Model.PluginClassManager.GetEditControl(System.Type,System.String)">
            <summary>
            Gets the edit control.
            </summary>
            <param name="type">The type.</param>
            <param name="subject">The subject.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:Concept.Model.PluginClassManager.AddEditControl(System.Type,System.Type,System.String)">
            <summary>
            Adds the edit control with a specific subject.
            </summary>
            <param name="type">The type.</param>
            <param name="editControlType">Type of the edit control.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:Concept.Model.PluginClassManager.SynchronizeWithLoadedAssembly">
            <summary>
            Synchronizes the with loaded assembly.
            </summary>
        </member>
        <member name="M:Concept.Model.PluginClassManager.FilterTypes(System.Collections.Generic.IEnumerable{System.Type},System.Type)">
            <summary>
            Filters the types.
            </summary>
            <param name="types">The types.</param>
            <param name="parentType">Type of the parent.</param>
            <returns>IEnumerable{Type}.</returns>
        </member>
        <member name="M:Concept.Model.PluginClassManager.FilteredConceptElementClassList(System.Type)">
            <summary>
            Filtereds the concept element class list.
            </summary>
            <param name="parentType">Type of the parent.</param>
            <returns>IEnumerable{Type}.</returns>
        </member>
        <member name="P:Concept.Model.PluginClassManager.FilePathToAssembly">
            <summary>
            Give the whole information which files had been tried to be loaded.
            </summary>
        </member>
        <member name="P:Concept.Model.PluginClassManager.AllFactories">
            <summary>
            Gets all factories.
            </summary>
            <value>All factories.</value>
        </member>
        <member name="P:Concept.Model.PluginClassManager.ConceptElementClassList">
            <summary>
            Gets the concept element class list.
            </summary>
            <value>The concept element class list.</value>
        </member>
        <member name="P:Concept.Model.PluginClassManager.AllConceptElementClassList">
            <summary>
            Gets the concept element class list, including abstract et non-visible.
            </summary>
            <value>The concept element class list.</value>
        </member>
    </members>
</doc>
